[{"path":"https://mattheaphy.github.io/actxps/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Matt Heaphy Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"simulated-data-set","dir":"Articles","previous_headings":"","what":"Simulated data set","title":"Getting started with actxps","text":"actxps package includes data frame containing simulated census data theoretical deferred annuity product optional guaranteed income rider. grain data one row per policy. data includes 3 policy statuses: Active, Death, Surrender. Let’s assume ’re interested calculating probability surrender one policy year. simply calculate proportion policies surrendered status represent annualized surrender rate.","code":"library(actxps) library(dplyr)  census_dat #> # A tibble: 20,000 × 11 #>    pol_num status  issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>   <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active  2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       2 Surren… 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  3       3 Active  2012-10-06 FALSE    TRUE     62 b       F          63     466 #>  4       4 Surren… 2005-06-27 TRUE     TRUE     62 c       M          62     485 #>  5       5 Active  2019-11-22 FALSE    FALSE    62 c       F          67     978 #>  6       6 Active  2018-09-01 FALSE    TRUE     77 a       F          77    1288 #>  7       7 Active  2011-07-23 TRUE     TRUE     63 a       M          65    1046 #>  8       8 Active  2005-11-08 TRUE     TRUE     58 a       M          58    1956 #>  9       9 Active  2010-09-19 FALSE    FALSE    53 c       M          64    2165 #> 10      10 Active  2012-05-25 TRUE     FALSE    61 b       M          73     609 #> # ℹ 19,990 more rows #> # ℹ 1 more variable: term_date <date> (status_counts <- table(census_dat$status)) #>  #>    Active     Death Surrender  #>     15212      1816      2972 # incorrect prop.table(status_counts) #>  #>    Active     Death Surrender  #>    0.7606    0.0908    0.1486"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"creating-exposed-data","dir":"Articles","previous_headings":"","what":"Creating exposed data","title":"Getting started with actxps","text":"order calculate annual surrender rates, need break policy multiple records. one row per policy per year. expose() family functions used perform transformation. functions create exposed_df objects, type data frame additional attributes related experience study. Now data “exposed” policy year, observed annual surrender probability can calculated : default, expose() function calculates exposures policy year. can also accomplished function expose_py(). implementations expose() include: expose_cy = exposures calendar year expose_cq = exposures calendar quarter expose_cm = exposures calendar month expose_cw = exposures calendar week expose_pq = exposures policy quarter expose_pm = exposures policy month expose_pw = exposures policy week See vignette(\"exposures\") details exposure calculations.","code":"exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                        target_status = \"Surrender\")  exposed_data #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 5 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl> sum(exposed_data$status == \"Surrender\") / sum(exposed_data$exposure) #> [1] 0.02163097"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"experience-study-summary-function","dir":"Articles","previous_headings":"","what":"Experience study summary function","title":"Getting started with actxps","text":"exp_stats() function creates summary observed experience data. output function exp_df object. See vignette(\"exp_summary\") details exposure calculations.","code":"exp_stats(exposed_data) #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"grouped-experience-data","dir":"Articles","previous_headings":"Experience study summary function","what":"Grouped experience data","title":"Getting started with actxps","text":"data frame passed exp_stats() grouped using dplyr::group_by(), resulting output contain one record unique group.","code":"exp_res <- exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats()  exp_res #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 6 #>    pol_yr inc_guar n_claims claims exposure   q_obs #>     <int> <lgl>       <int>  <int>    <dbl>   <dbl> #>  1      1 FALSE          56     56    7720. 0.00725 #>  2      1 TRUE           46     46   11532. 0.00399 #>  3      2 FALSE          92     92    7103. 0.0130  #>  4      2 TRUE           68     68   10612. 0.00641 #>  5      3 FALSE          67     67    6447. 0.0104  #>  6      3 TRUE           57     57    9650. 0.00591 #>  7      4 FALSE         123    123    5799. 0.0212  #>  8      4 TRUE           45     45    8737. 0.00515 #>  9      5 FALSE          97     97    5106. 0.0190  #> 10      5 TRUE           67     67    7810. 0.00858 #> # ℹ 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"actual-to-expected-rates","dir":"Articles","previous_headings":"Experience study summary function","what":"Actual-to-expected rates","title":"Getting started with actxps","text":"derive actual--expected rates, first attach one columns expected termination rates exposure data. , pass column names expected argument exp_stats().","code":"expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination rates exposed_data <- exposed_data |>   mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"))  exp_res #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 30 × 10 #>    pol_yr inc_guar n_claims claims exposure   q_obs expected_1 expected_2 #>     <int> <lgl>       <int>  <int>    <dbl>   <dbl>      <dbl>      <dbl> #>  1      1 FALSE          56     56    7720. 0.00725    0.005        0.03  #>  2      1 TRUE           46     46   11532. 0.00399    0.005        0.015 #>  3      2 FALSE          92     92    7103. 0.0130     0.00778      0.03  #>  4      2 TRUE           68     68   10612. 0.00641    0.00778      0.015 #>  5      3 FALSE          67     67    6447. 0.0104     0.0106       0.03  #>  6      3 TRUE           57     57    9650. 0.00591    0.0106       0.015 #>  7      4 FALSE         123    123    5799. 0.0212     0.0133       0.03  #>  8      4 TRUE           45     45    8737. 0.00515    0.0133       0.015 #>  9      5 FALSE          97     97    5106. 0.0190     0.0161       0.03  #> 10      5 TRUE           67     67    7810. 0.00858    0.0161       0.015 #> # ℹ 20 more rows #> # ℹ 2 more variables: ae_expected_1 <dbl>, ae_expected_2 <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"autoplot-and-autotable","dir":"Articles","previous_headings":"Experience study summary function","what":"autoplot() and autotable()","title":"Getting started with actxps","text":"autoplot() autotable() functions create visualizations summary tables. See vignette(\"visualizations\") full details functions.","code":"autoplot(exp_res) # first 10 rows showed for brevity exp_res |> head(10) |> autotable()"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"summary","dir":"Articles","previous_headings":"Experience study summary function","what":"summary()","title":"Getting started with actxps","text":"Calling summary() function exp_df object re-summarizes experience results. also produces exp_df object. additional variables passed ..., variables become groups re-summarized exp_df object.","code":"summary(exp_res) #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 1 × 8 #>   n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 #>      <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl> #> 1     2869   2869  132634. 0.0216     0.0242     0.0209         0.892 #> # ℹ 1 more variable: ae_expected_2 <dbl> summary(exp_res, inc_guar) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 2 × 9 #>   inc_guar n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 #>   <lgl>       <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl> #> 1 FALSE        1601   1601   52123. 0.0307     0.0235      0.03          1.31  #> 2 TRUE         1268   1268   80511. 0.0157     0.0247      0.015         0.637 #> # ℹ 1 more variable: ae_expected_2 <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/actxps.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"Getting started with actxps","text":"Passing exposed_df object exp_shiny() function launches Shiny app enables interactive exploration experience data.","code":"exp_shiny(exposed_data)"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"the-exp_stats-function","dir":"Articles","previous_headings":"","what":"The exp_stats() function","title":"Experience summaries","text":"use exp_stats(), pass data frame exposure-level records, ideally type exposed_df (object class returned expose() family functions). results show us specified groups, output data single row. addition, can see ’re looking surrender rates end 2019, exp_stats() inferred exposed_data. number claims (n_claims) equal number “Surrender” statuses exposed_data. Since didn’t specify weighting variable, amount claims (claims) equals number claims. total exposure (exposure) equal sum exposures exposed_data. specified weighting variable, equal sum weighted exposures. Lastly, observed termination rate (q_obs) equals amount claims divided exposures.","code":"exp_stats(exposed_data) #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216 (amount <- sum(exposed_data$status == \"Surrender\")) #> [1] 2869 (sum_expo <- sum(exposed_data$exposure)) #> [1] 132633.9 amount / sum_expo #> [1] 0.02163097"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"grouped-data","dir":"Articles","previous_headings":"The exp_stats() function","what":"Grouped data","title":"Experience summaries","text":"data frame passed exp_stats() grouped using dplyr::group_by(), resulting output contain one record unique group. following, exposed_data grouped policy year passed exp_stats(). results one row per policy year found data. Multiple grouping variables allowed. , presence income guarantee (inc_guar) added second grouping variable.","code":"exposed_data |>    group_by(pol_yr) |>    exp_stats() #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 15 × 5 #>    pol_yr n_claims claims exposure   q_obs #>     <int>    <int>  <int>    <dbl>   <dbl> #>  1      1      102    102   19252. 0.00530 #>  2      2      160    160   17715. 0.00903 #>  3      3      124    124   16097. 0.00770 #>  4      4      168    168   14536. 0.0116  #>  5      5      164    164   12916. 0.0127  #>  6      6      152    152   11376. 0.0134  #>  7      7      164    164    9917. 0.0165  #>  8      8      190    190    8448. 0.0225  #>  9      9      181    181    6960. 0.0260  #> 10     10      152    152    5604. 0.0271  #> 11     11      804    804    4390. 0.183   #> 12     12      330    330    2663. 0.124   #> 13     13       99     99    1620. 0.0611  #> 14     14       62     62     872. 0.0711  #> 15     15       17     17     268. 0.0634 exposed_data |>    group_by(inc_guar, pol_yr) |>    exp_stats() #>  #> ── Experience study results ── #>  #> • Groups: inc_guar and pol_yr #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 6 #>    inc_guar pol_yr n_claims claims exposure   q_obs #>    <lgl>     <int>    <int>  <int>    <dbl>   <dbl> #>  1 FALSE         1       56     56    7720. 0.00725 #>  2 FALSE         2       92     92    7103. 0.0130  #>  3 FALSE         3       67     67    6447. 0.0104  #>  4 FALSE         4      123    123    5799. 0.0212  #>  5 FALSE         5       97     97    5106. 0.0190  #>  6 FALSE         6       96     96    4494. 0.0214  #>  7 FALSE         7       92     92    3899. 0.0236  #>  8 FALSE         8      103    103    3287. 0.0313  #>  9 FALSE         9       87     87    2684. 0.0324  #> 10 FALSE        10       60     60    2156. 0.0278  #> # ℹ 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"target-status","dir":"Articles","previous_headings":"The exp_stats() function","what":"Target status","title":"Experience summaries","text":"target_status argument exp_stats() specifies status levels count claims experience study summary. data passed exp_stats() exposed_df object already specified target status (via prior call expose()), argument necessary target status automatically inferred. Even target status exists input data, can overridden. However care taken ensure exposure values data appropriate new status. Using example data, total termination rate can estimated including death surrender statuses target_status. ensure exposures accurate, adjustment made fully expose deaths prior calling exp_stats()2.","code":"exposed_data |>    mutate(exposure = ifelse(status == \"Death\", 1, status)) |>    group_by(pol_yr) |>    exp_stats(target_status = c(\"Surrender\", \"Death\")) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender and Death #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 15 × 5 #>    pol_yr n_claims claims exposure  q_obs #>     <int>    <int>  <int>    <dbl>  <dbl> #>  1      1      290    290    20199 0.0144 #>  2      2      325    325    18754 0.0173 #>  3      3      292    292    17054 0.0171 #>  4      4      329    329    15602 0.0211 #>  5      5      329    329    13946 0.0236 #>  6      6      334    334    12371 0.0270 #>  7      7      297    297    10869 0.0273 #>  8      8      340    340     9510 0.0358 #>  9      9      308    308     7953 0.0387 #> 10     10      260    260     6489 0.0401 #> 11     11      894    894     6505 0.137  #> 12     12      398    398     3753 0.106  #> 13     13      131    131     2135 0.0614 #> 14     14       89     89     1306 0.0681 #> 15     15       23     23      544 0.0423"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"weighted-results","dir":"Articles","previous_headings":"","what":"Weighted results","title":"Experience summaries","text":"Experience studies often weight output key policy values. Examples include account values, cash values, face amount, premiums, . Weighting can accomplished passing name weighting column wt argument exp_stats(). sample data contains column called premium can weight . weights supplied, claims, exposure, q_obs columns weighted. expected termination rates supplied (see ), rates /E values also weighted.3","code":"exposed_data |>    group_by(pol_yr) |>    exp_stats(wt = 'premium') #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Weighted by: premium #>  #> # A tibble: 15 × 8 #>    pol_yr n_claims claims  exposure   q_obs  .weight  .weight_sq .weight_n #>     <int>    <int>  <dbl>     <dbl>   <dbl>    <dbl>       <dbl>     <dbl> #>  1      1      102  83223 25312812. 0.00329 26301746 60742993234     19995 #>  2      2      160 170058 23352461. 0.00728 24275265 56232848027     18434 #>  3      3      124 123554 21246765. 0.00582 22201817 51746834383     16806 #>  4      4      168 176751 19270856. 0.00917 20200019 47142441689     15266 #>  5      5      164 173273 17228978. 0.0101  18134795 42887920479     13618 #>  6      6      152 163034 15246504. 0.0107  16192950 38828949428     12067 #>  7      7      164 153238 13328777. 0.0115  14159437 34291451913     10541 #>  8      8      190 174200 11476433. 0.0152  12346124 30121310640      9130 #>  9      9      181 187337  9546247. 0.0196  10420172 25781142118      7591 #> 10     10      152 157603  7707062. 0.0204   8543150 20882643976      6185 #> 11     11      804 856379  6093168. 0.141    6783273 16219955859      4897 #> 12     12      330 383055  3883534. 0.0986   4525027 11191462577      3093 #> 13     13       99 123357  2450266. 0.0503   2891573  7075934189      1937 #> 14     14       62  75534  1339240. 0.0564   1821026  4655661820      1182 #> 15     15       17  19168   401169. 0.0478    783146  1944755748       510"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"expected-values-and-ae-ratios","dir":"Articles","previous_headings":"","what":"Expected values and A/E ratios","title":"Experience summaries","text":"common metric experience studies actual--expected, /E ratio. /Eratio=observedvalueexpectedvalue /E\\ ratio = \\frac{observed\\ value}{expected\\ value} data passed exp_stats() one columns containing expected termination rates, /E ratios can calculated passing names columns expected argument. Let’s assume two sets expected rates. first set vector varies policy year. second set either 1.5% 3.0% depending whether policy guaranteed income benefit. First, need attach assumptions exposure data. use names expected_1 expected_2. pass names expected argument call exp_stats(). output, 4 new columns created expected rates /E ratios. noted , weights passed exp_stats() /E ratios also weighted.","code":"expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination assumption sets exposed_data <- exposed_data |>   mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"))   exp_res |>    select(pol_yr, inc_guar, q_obs, expected_1, expected_2,           ae_expected_1, ae_expected_2) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 30 × 7 #>    pol_yr inc_guar   q_obs expected_1 expected_2 ae_expected_1 ae_expected_2 #>     <int> <lgl>      <dbl>      <dbl>      <dbl>         <dbl>         <dbl> #>  1      1 FALSE    0.00725    0.005        0.03          1.45          0.242 #>  2      1 TRUE     0.00399    0.005        0.015         0.798         0.266 #>  3      2 FALSE    0.0130     0.00778      0.03          1.67          0.432 #>  4      2 TRUE     0.00641    0.00778      0.015         0.824         0.427 #>  5      3 FALSE    0.0104     0.0106       0.03          0.985         0.346 #>  6      3 TRUE     0.00591    0.0106       0.015         0.560         0.394 #>  7      4 FALSE    0.0212     0.0133       0.03          1.59          0.707 #>  8      4 TRUE     0.00515    0.0133       0.015         0.386         0.343 #>  9      5 FALSE    0.0190     0.0161       0.03          1.18          0.633 #> 10      5 TRUE     0.00858    0.0161       0.015         0.532         0.572 #> # ℹ 20 more rows exposed_data |>   group_by(pol_yr, inc_guar) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"),              wt = \"premium\") |>    select(pol_yr, inc_guar, q_obs, expected_1, expected_2,           ae_expected_1, ae_expected_2) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #> • Weighted by: premium #>  #> # A tibble: 30 × 7 #>    pol_yr inc_guar   q_obs expected_1 expected_2 ae_expected_1 ae_expected_2 #>     <int> <lgl>      <dbl>      <dbl>      <dbl>         <dbl>         <dbl> #>  1      1 FALSE    0.00471    0.005        0.03          0.942         0.157 #>  2      1 TRUE     0.00235    0.005        0.015         0.470         0.157 #>  3      2 FALSE    0.0105     0.00778      0.03          1.36          0.351 #>  4      2 TRUE     0.00513    0.00778      0.015         0.660         0.342 #>  5      3 FALSE    0.00737    0.0106       0.03          0.698         0.246 #>  6      3 TRUE     0.00479    0.0106       0.015         0.453         0.319 #>  7      4 FALSE    0.0174     0.0133       0.03          1.30          0.579 #>  8      4 TRUE     0.00377    0.0133       0.015         0.283         0.252 #>  9      5 FALSE    0.0146     0.0161       0.03          0.907         0.487 #> 10      5 TRUE     0.00710    0.0161       0.015         0.441         0.473 #> # ℹ 20 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"control-variables","dir":"Articles","previous_headings":"Expected values and A/E ratios","what":"Control variables","title":"Experience summaries","text":"Control variables related concept expected values. Control variables used estimate impact grouping variables observed experience accounting impact (control) variables. Control variables can help answer questions like, “much lower surrender rates policy year contracts guaranteed income rider relative contracts without rider?”. , presence guaranteed income rider grouping variable policy year control variable. Control variables specified using optional control_vars argument. provided, argument must \".none\" () character vector values corresponding column names .data. answer question , can group data inc_guar add control_vars = \"pol_yr\" call exp_stats(). resulting output two new columns appeared: control: Observed surrender rates considering control variables (pol_yr) . fact two values control match surprising simply represents fact distributions pol_yr across levels inc_guar identical. ae_control: /E ratio observed experience versus control. estimate impact inc_guar accounting pol_yr effects. results show presence guaranteed income rider decreases surrender rates significant amount. converse true contracts without rider. alternative, \".none\" passed control_vars, single aggregate termination rate calculated entire data set used compute control ae_control. Note : control now constant value Different results yielded ae_control control_distinct_max argument places upper limit number unique values control variable allowed . limit exists prevent excessive number groups continuous high-cardinality features. noted usage control variables rough approximation substitute rigorous statistical models. impact control variables calculated isolation consider features possible confounding variables. , control variables useful exploratory data analysis.","code":"exposed_data |>   group_by(inc_guar) |>   exp_stats(control_vars = \"pol_yr\") |>    select(inc_guar, q_obs, control, ae_control) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Control variables: pol_yr #> • Expected values: control #>  #> # A tibble: 2 × 4 #>   inc_guar  q_obs control ae_control #>   <lgl>     <dbl>   <dbl>      <dbl> #> 1 FALSE    0.0307  0.0209      1.47  #> 2 TRUE     0.0157  0.0221      0.712 exposed_data |>   group_by(inc_guar) |>   exp_stats(control_vars = \".none\") |>    select(inc_guar, q_obs, control, ae_control) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Control variables: None #> • Expected values: control #>  #> # A tibble: 2 × 4 #>   inc_guar  q_obs control ae_control #>   <lgl>     <dbl>   <dbl>      <dbl> #> 1 FALSE    0.0307  0.0216      1.42  #> 2 TRUE     0.0157  0.0216      0.728"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"credibility","dir":"Articles","previous_headings":"","what":"Credibility","title":"Experience summaries","text":"credibility argument set TRUE, exp_stats() produce estimate partial credibility Limited Fluctuation credibility method (also known Classical Credibility) assuming binomial distribution claims.4 default arguments, credibility calculations assume 95% confidence within 5% true value. parameters can overridden using conf_level cred_r arguments, respectively. expected values passed exp_stats() credibility set TRUE, output also contain credibility-weighted expected values: qadj=Zcred×qobs+(1−Zcred)×qexp q^{adj} = Z^{cred} \\times q^{obs} + (1-Z^{cred}) \\times q^{exp}  , qadjq^{adj} = credibility-weighted estimate ZcredZ^{cred} = partial credibility factor qobsq^{obs} = observed termination rate qexpq^{exp} = expected termination rate","code":"exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE) |>    select(pol_yr, inc_guar, claims, q_obs, credibility) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar claims   q_obs credibility #>     <int> <lgl>     <int>   <dbl>       <dbl> #>  1      1 FALSE        56 0.00725       0.192 #>  2      1 TRUE         46 0.00399       0.173 #>  3      2 FALSE        92 0.0130        0.246 #>  4      2 TRUE         68 0.00641       0.211 #>  5      3 FALSE        67 0.0104        0.210 #>  6      3 TRUE         57 0.00591       0.193 #>  7      4 FALSE       123 0.0212        0.286 #>  8      4 TRUE         45 0.00515       0.172 #>  9      5 FALSE        97 0.0190        0.254 #> 10      5 TRUE         67 0.00858       0.210 #> # ℹ 20 more rows exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE, conf_level = 0.98, cred_r = 0.03) |>    select(pol_yr, inc_guar, claims, q_obs, credibility) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar claims   q_obs credibility #>     <int> <lgl>     <int>   <dbl>       <dbl> #>  1      1 FALSE        56 0.00725      0.0969 #>  2      1 TRUE         46 0.00399      0.0876 #>  3      2 FALSE        92 0.0130       0.125  #>  4      2 TRUE         68 0.00641      0.107  #>  5      3 FALSE        67 0.0104       0.106  #>  6      3 TRUE         57 0.00591      0.0976 #>  7      4 FALSE       123 0.0212       0.145  #>  8      4 TRUE         45 0.00515      0.0867 #>  9      5 FALSE        97 0.0190       0.128  #> 10      5 TRUE         67 0.00858      0.106  #> # ℹ 20 more rows exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(credibility = TRUE, expected = \"expected_1\") |>    select(pol_yr, inc_guar, claims, q_obs, credibility, adj_expected_1,           expected_1, ae_expected_1) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 #>  #> # A tibble: 30 × 8 #>    pol_yr inc_guar claims   q_obs credibility adj_expected_1 expected_1 #>     <int> <lgl>     <int>   <dbl>       <dbl>          <dbl>      <dbl> #>  1      1 FALSE        56 0.00725       0.192        0.00543    0.005   #>  2      1 TRUE         46 0.00399       0.173        0.00482    0.005   #>  3      2 FALSE        92 0.0130        0.246        0.00905    0.00778 #>  4      2 TRUE         68 0.00641       0.211        0.00749    0.00778 #>  5      3 FALSE        67 0.0104        0.210        0.0105     0.0106  #>  6      3 TRUE         57 0.00591       0.193        0.00966    0.0106  #>  7      4 FALSE       123 0.0212        0.286        0.0156     0.0133  #>  8      4 TRUE         45 0.00515       0.172        0.0119     0.0133  #>  9      5 FALSE        97 0.0190        0.254        0.0168     0.0161  #> 10      5 TRUE         67 0.00858       0.210        0.0145     0.0161  #> # ℹ 20 more rows #> # ℹ 1 more variable: ae_expected_1 <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"Confidence intervals","title":"Experience summaries","text":"conf_int set TRUE, exp_stats() produce lower upper confidence interval limits observed termination rate. weighting variable passed wt, confidence intervals constructed assuming binomial distribution claims. However, weighting variable supplied, normal distribution aggregate claims assumed mean equal observed claims variance equal : Var(S)=E(N)×Var(X)+E(X)2×Var(N) Var(S) = E(N) \\times Var(X) + E(X)^2 \\times Var(N) S aggregate claim random variable, X weighting variable assumed follow normal distribution, N binomial random variable number claims. default confidence level 95%. can changed using conf_level argument. , tighter confidence intervals constructed decreasing confidence level 90%. expected values passed expected, output also contain confidence intervals around actual--expected ratios. Lastly, credibility TRUE expected values passed expected, confidence intervals also calculated credibility-weighted termination rates.","code":"exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(conf_int = TRUE) |>    select(pol_yr, inc_guar, q_obs, q_obs_lower, q_obs_upper) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar   q_obs q_obs_lower q_obs_upper #>     <int> <lgl>      <dbl>       <dbl>       <dbl> #>  1      1 FALSE    0.00725     0.00544     0.00920 #>  2      1 TRUE     0.00399     0.00286     0.00520 #>  3      2 FALSE    0.0130      0.0104      0.0156  #>  4      2 TRUE     0.00641     0.00490     0.00801 #>  5      3 FALSE    0.0104      0.00807     0.0129  #>  6      3 TRUE     0.00591     0.00446     0.00746 #>  7      4 FALSE    0.0212      0.0176      0.0250  #>  8      4 TRUE     0.00515     0.00366     0.00675 #>  9      5 FALSE    0.0190      0.0153      0.0229  #> 10      5 TRUE     0.00858     0.00666     0.0106  #> # ℹ 20 more rows exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(conf_int = TRUE, conf_level = 0.9) |>    select(pol_yr, inc_guar, q_obs, q_obs_lower, q_obs_upper) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar   q_obs q_obs_lower q_obs_upper #>     <int> <lgl>      <dbl>       <dbl>       <dbl> #>  1      1 FALSE    0.00725     0.00570     0.00894 #>  2      1 TRUE     0.00399     0.00303     0.00494 #>  3      2 FALSE    0.0130      0.0108      0.0152  #>  4      2 TRUE     0.00641     0.00518     0.00773 #>  5      3 FALSE    0.0104      0.00838     0.0126  #>  6      3 TRUE     0.00591     0.00466     0.00725 #>  7      4 FALSE    0.0212      0.0181      0.0243  #>  8      4 TRUE     0.00515     0.00389     0.00641 #>  9      5 FALSE    0.0190      0.0159      0.0221  #> 10      5 TRUE     0.00858     0.00691     0.0104  #> # ℹ 20 more rows exposed_data |>    group_by(pol_yr, inc_guar) |>   exp_stats(conf_int = TRUE, expected = \"expected_1\") |>    select(pol_yr, inc_guar, starts_with(\"ae_\")) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 #>  #> # A tibble: 30 × 5 #>    pol_yr inc_guar ae_expected_1 ae_expected_1_lower ae_expected_1_upper #>     <int> <lgl>            <dbl>               <dbl>               <dbl> #>  1      1 FALSE            1.45                1.09                1.84  #>  2      1 TRUE             0.798               0.572               1.04  #>  3      2 FALSE            1.67                1.34                2.01  #>  4      2 TRUE             0.824               0.630               1.03  #>  5      3 FALSE            0.985               0.764               1.22  #>  6      3 TRUE             0.560               0.422               0.707 #>  7      4 FALSE            1.59                1.32                1.88  #>  8      4 TRUE             0.386               0.275               0.506 #>  9      5 FALSE            1.18                0.948               1.42  #> 10      5 TRUE             0.532               0.413               0.660 #> # ℹ 20 more rows"},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"summary-method","dir":"Articles","previous_headings":"Miscellaneous","what":"Summary method","title":"Experience summaries","text":"noted , result exp_stats() exp_df object. summary() function applied exp_df object, data summarized return higher level exp_df object. additional arguments passed, summary() returns single row aggregate results. additional variable names passed summary() function, output group data variables. example, pol_yr passed summary(), output contain one row per policy year. Similarly, inc_guar passed summary(), output contain row unique value inc_guar.","code":"summary(exp_res) #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 1 × 8 #>   n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 #>      <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl> #> 1     2869   2869  132634. 0.0216     0.0242     0.0209         0.892 #> # ℹ 1 more variable: ae_expected_2 <dbl> summary(exp_res, pol_yr) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 15 × 9 #>    pol_yr n_claims claims exposure   q_obs expected_1 expected_2 ae_expected_1 #>     <int>    <int>  <int>    <dbl>   <dbl>      <dbl>      <dbl>         <dbl> #>  1      1      102    102   19252. 0.00530    0.005       0.0210         1.06  #>  2      2      160    160   17715. 0.00903    0.00778     0.0210         1.16  #>  3      3      124    124   16097. 0.00770    0.0106      0.0210         0.730 #>  4      4      168    168   14536. 0.0116     0.0133      0.0210         0.867 #>  5      5      164    164   12916. 0.0127     0.0161      0.0209         0.788 #>  6      6      152    152   11376. 0.0134     0.0189      0.0209         0.707 #>  7      7      164    164    9917. 0.0165     0.0217      0.0209         0.763 #>  8      8      190    190    8448. 0.0225     0.0244      0.0208         0.920 #>  9      9      181    181    6960. 0.0260     0.0272      0.0208         0.955 #> 10     10      152    152    5604. 0.0271     0.03        0.0208         0.904 #> 11     11      804    804    4390. 0.183      0.2         0.0208         0.916 #> 12     12      330    330    2663. 0.124      0.15        0.0200         0.826 #> 13     13       99     99    1620. 0.0611     0.05        0.0197         1.22  #> 14     14       62     62     872. 0.0711     0.05        0.0195         1.42  #> 15     15       17     17     268. 0.0634     0.05        0.0191         1.27  #> # ℹ 1 more variable: ae_expected_2 <dbl> summary(exp_res, inc_guar) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 2 × 9 #>   inc_guar n_claims claims exposure  q_obs expected_1 expected_2 ae_expected_1 #>   <lgl>       <int>  <int>    <dbl>  <dbl>      <dbl>      <dbl>         <dbl> #> 1 FALSE        1601   1601   52123. 0.0307     0.0235      0.03          1.31  #> 2 TRUE         1268   1268   80511. 0.0157     0.0247      0.015         0.637 #> # ℹ 1 more variable: ae_expected_2 <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"column-names","dir":"Articles","previous_headings":"Miscellaneous","what":"Column names","title":"Experience summaries","text":"default, exp_stats() assumes input data frame uses following naming conventions: exposure column called exposure status column called status default names can overridden using col_exposure col_status arguments. example, status column called curr_stat data, write:","code":"exposed_data |>    exp_stats(col_status = \"curr_stat\")"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"applying-exp_stats-to-a-non-exposed_df-data-frame","dir":"Articles","previous_headings":"Miscellaneous","what":"Applying exp_stats to a non-exposed_df data frame","title":"Experience summaries","text":"exp_stats() can still work given non-exposed_df data frame. However, unable infer certain attributes like target status study dates. target status, statuses except first level assumed terminations. Since may desirable, warning message appear informing statuses assumed terminated. target_status provided, warning message appear.","code":"not_exposed_df <- data.frame(exposed_data)  exp_stats(not_exposed_df) #> Warning: ✖ No target status was provided. #> ℹ \"Death\" and \"Surrender\" were assumed. #>  #> ── Experience study results ── #>  #> • Target status: Death and Surrender #> • Study range: to #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1     4639   4639  132634. 0.0350 exp_stats(not_exposed_df, target_status = \"Surrender\") #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: to #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1     2869   2869  132634. 0.0216"},{"path":"https://mattheaphy.github.io/actxps/articles/exp_summary.html","id":"limitations","dir":"Articles","previous_headings":"Miscellaneous","what":"Limitations","title":"Experience summaries","text":"exp_stats() function supports termination studies. contain support transaction studies studies multiple changes active inactive status. information transaction studies, see vignette(\"transactions\").","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"toy-census-data","dir":"Articles","previous_headings":"","what":"Toy census data","title":"Exposure calculations","text":"get started, ’re going use toy census data frame actxps package contains 3 policies: one active, one terminated due death, one terminated due surrender. toy_census contains 4 columns necessary compute exposures: pol_num: unique identifier individual policies status: policy status issue_date: issue date term_date: termination date, . Otherwise NA","code":"library(actxps) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr)  toy_census #>   pol_num    status issue_date  term_date #> 1       1    Active 2010-01-01       <NA> #> 2       2     Death 2011-05-27 2020-09-14 #> 3       3 Surrender 2009-11-10 2022-02-25"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"policy-year-exposures","dir":"Articles","previous_headings":"","what":"Policy year exposures","title":"Exposure calculations","text":"Let’s assume ’re performing experience study 2022-12-31 ’re interested policy year exposures. ’s expect 3 policies. Policy 1 issued January 1, 2010 terminated. Therefore expect 13 exposure years. Policy 2 issued May 27, 2011 terminated 2020 due death. death occurred 9th policy anniversary, therefore expect 9 fully exposed years partial exposure 10th year. Policy 3 issued November 10, 2009 terminated 2022 due surrender. surrender occurred 12th policy anniversary, therefore expect 12 fully exposed years partial exposure 13th year. calculate exposures, pass data expose() function specify study end_date. creates exposed_df object, type data frame additional attributes related experience study. Let’s examine happened policy. Policy 1: expected, 13 rows policy. New columns added policy year (pol_yr), date ranges (pol_date_yr, pol_date_yr_end), exposure. exposures 100% since policy active 13 years. data printed, additional attributes exposed_df class displayed. Policy 2: 10 rows policy. first 9 periods show policy active status termination date (term_date) set NA. last period includes final status “Death” actual termination date. last exposure less one roughly third year elapsed last anniversary date 2020-05-27 termination date 2020-09-14. Policy 3: 13 rows policy. first 12 periods show policy active status termination date (term_date) set NA. last period includes final status “Surrender” actual termination date. last exposure less one roughly third year elapsed last anniversary date 2021-11-10 termination date 2022-02-25.","code":"exposed_data <- expose(toy_census, end_date = \"2022-12-31\") is_exposed_df(exposed_data) #> [1] TRUE exposed_data |> filter(pol_num == 1) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 13 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>  <date>     <date>     <int> <date>      <date>          #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31      #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31      #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31      #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31      #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31      #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31      #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31      #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31      #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31      #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31      #> 11       1 Active 2010-01-01 NA            11 2020-01-01  2020-12-31      #> 12       1 Active 2010-01-01 NA            12 2021-01-01  2021-12-31      #> 13       1 Active 2010-01-01 NA            13 2022-01-01  2022-12-31      #> # ℹ 1 more variable: exposure <dbl> exposed_data |> filter(pol_num == 2) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 10 × 8 #>    pol_num status issue_date term_date  pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>  <date>     <date>      <int> <date>      <date>          #>  1       2 Active 2011-05-27 NA              1 2011-05-27  2012-05-26      #>  2       2 Active 2011-05-27 NA              2 2012-05-27  2013-05-26      #>  3       2 Active 2011-05-27 NA              3 2013-05-27  2014-05-26      #>  4       2 Active 2011-05-27 NA              4 2014-05-27  2015-05-26      #>  5       2 Active 2011-05-27 NA              5 2015-05-27  2016-05-26      #>  6       2 Active 2011-05-27 NA              6 2016-05-27  2017-05-26      #>  7       2 Active 2011-05-27 NA              7 2017-05-27  2018-05-26      #>  8       2 Active 2011-05-27 NA              8 2018-05-27  2019-05-26      #>  9       2 Active 2011-05-27 NA              9 2019-05-27  2020-05-26      #> 10       2 Death  2011-05-27 2020-09-14     10 2020-05-27  2021-05-26      #> # ℹ 1 more variable: exposure <dbl> exposed_data |> filter(pol_num == 3) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 13 × 8 #>    pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>     <date>     <date>      <int> <date>      <date>          #>  1       3 Active    2009-11-10 NA              1 2009-11-10  2010-11-09      #>  2       3 Active    2009-11-10 NA              2 2010-11-10  2011-11-09      #>  3       3 Active    2009-11-10 NA              3 2011-11-10  2012-11-09      #>  4       3 Active    2009-11-10 NA              4 2012-11-10  2013-11-09      #>  5       3 Active    2009-11-10 NA              5 2013-11-10  2014-11-09      #>  6       3 Active    2009-11-10 NA              6 2014-11-10  2015-11-09      #>  7       3 Active    2009-11-10 NA              7 2015-11-10  2016-11-09      #>  8       3 Active    2009-11-10 NA              8 2016-11-10  2017-11-09      #>  9       3 Active    2009-11-10 NA              9 2017-11-10  2018-11-09      #> 10       3 Active    2009-11-10 NA             10 2018-11-10  2019-11-09      #> 11       3 Active    2009-11-10 NA             11 2019-11-10  2020-11-09      #> 12       3 Active    2009-11-10 NA             12 2020-11-10  2021-11-09      #> 13       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09      #> # ℹ 1 more variable: exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"study-start-date","dir":"Articles","previous_headings":"Policy year exposures","what":"Study start date","title":"Exposure calculations","text":"previous section supplied data study end_date expose(). Optionally, start_date can supplied drop exposure periods begin specified date.","code":"expose(toy_census, end_date = \"2022-12-31\", start_date = \"2019-12-31\") #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 2019-12-31 to 2022-12-31 #>  #> # A tibble: 6 × 8 #>   pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date_yr_end #>     <int> <fct>     <date>     <date>      <int> <date>      <date>          #> 1       1 Active    2010-01-01 NA             11 2020-01-01  2020-12-31      #> 2       1 Active    2010-01-01 NA             12 2021-01-01  2021-12-31      #> 3       1 Active    2010-01-01 NA             13 2022-01-01  2022-12-31      #> 4       2 Death     2011-05-27 2020-09-14     10 2020-05-27  2021-05-26      #> 5       3 Active    2009-11-10 NA             12 2020-11-10  2021-11-09      #> 6       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09      #> # ℹ 1 more variable: exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"target-status","dir":"Articles","previous_headings":"Policy year exposures","what":"Target status","title":"Exposure calculations","text":"experience studies use annual exposure method allocates full period exposure particular termination event interest scope study. intuition approach simple: let’s assume unrealistically small study single data point one policy course one year. Let’s assume policy terminated due surrender half way year. don’t apply annual exposure method, calculate termination rate : qsurr=claimsexposures=10.5=200% q^{surr} = \\frac{claims}{exposures} = \\frac{1}{0.5} = 200\\% termination rate 200% doesn’t make sense. annual exposure method see rate 100%, intuitive. qsurr=claimsexposures=11=100% q^{surr} = \\frac{claims}{exposures} = \\frac{1}{1} = 100\\% annual exposure method can applied passing character vector target statuses expose() function. Let’s assume performing surrender study. Now let’s verify exposure surrendered policy increased 100% last exposure period.","code":"exposed_data2 <- expose(toy_census, end_date = \"2022-12-31\",                          target_status = \"Surrender\") exposed_data2 |>    group_by(pol_num) |>    slice_max(pol_yr) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 3 × 8 #> # Groups:   pol_num [3] #>   pol_num status    issue_date term_date  pol_yr pol_date_yr pol_date_yr_end #>     <int> <fct>     <date>     <date>      <int> <date>      <date>          #> 1       1 Active    2010-01-01 NA             13 2022-01-01  2022-12-31      #> 2       2 Death     2011-05-27 2020-09-14     10 2020-05-27  2021-05-26      #> 3       3 Surrender 2009-11-10 2022-02-25     13 2021-11-10  2022-11-09      #> # ℹ 1 more variable: exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"other-exposure-periods","dir":"Articles","previous_headings":"","what":"Other exposure periods","title":"Exposure calculations","text":"default exposure basis used expose() policy years. Using arguments cal_expo expo_length exposure periods can used.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"calendar-years","dir":"Articles","previous_headings":"Other exposure periods","what":"Calendar years","title":"Exposure calculations","text":"cal_expo set TRUE, calendar year exposures calculated. Looking second policy, can see first year left-censored policy issued two-fifths way year, last period right-censored policy terminated roughly seven-tenths way year.","code":"exposed_cal <- toy_census |>    expose(end_date = \"2022-12-31\", cal_expo = TRUE, target_status = \"Surrender\")  exposed_cal |> filter(pol_num == 2) #>  #> ── Exposure data ── #>  #> • Exposure type: calendar_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 10 × 7 #>    pol_num status issue_date term_date  cal_yr     cal_yr_end exposure #>      <int> <fct>  <date>     <date>     <date>     <date>        <dbl> #>  1       2 Active 2011-05-27 NA         2011-01-01 2011-12-31    0.6   #>  2       2 Active 2011-05-27 NA         2012-01-01 2012-12-31    1     #>  3       2 Active 2011-05-27 NA         2013-01-01 2013-12-31    1     #>  4       2 Active 2011-05-27 NA         2014-01-01 2014-12-31    1     #>  5       2 Active 2011-05-27 NA         2015-01-01 2015-12-31    1     #>  6       2 Active 2011-05-27 NA         2016-01-01 2016-12-31    1     #>  7       2 Active 2011-05-27 NA         2017-01-01 2017-12-31    1     #>  8       2 Active 2011-05-27 NA         2018-01-01 2018-12-31    1     #>  9       2 Active 2011-05-27 NA         2019-01-01 2019-12-31    1     #> 10       2 Death  2011-05-27 2020-09-14 2020-01-01 2020-12-31    0.705"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"quarters-months-and-weeks","dir":"Articles","previous_headings":"Other exposure periods","what":"Quarters, months, and weeks","title":"Exposure calculations","text":"length exposure period can decreased passing \"quarter\", \"month\", \"week\" expo_length argument. can used policy calendar-based exposures.","code":"toy_census |>    expose(end_date = \"2022-12-31\",           cal_expo = TRUE,          expo_length = \"quarter\",           target_status = \"Surrender\") |>    filter(pol_num == 2) #>  #> ── Exposure data ── #>  #> • Exposure type: calendar_quarter #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 38 × 7 #>    pol_num status issue_date term_date cal_qtr    cal_qtr_end exposure #>      <int> <fct>  <date>     <date>    <date>     <date>         <dbl> #>  1       2 Active 2011-05-27 NA        2011-04-01 2011-06-30     0.385 #>  2       2 Active 2011-05-27 NA        2011-07-01 2011-09-30     1     #>  3       2 Active 2011-05-27 NA        2011-10-01 2011-12-31     1     #>  4       2 Active 2011-05-27 NA        2012-01-01 2012-03-31     1     #>  5       2 Active 2011-05-27 NA        2012-04-01 2012-06-30     1     #>  6       2 Active 2011-05-27 NA        2012-07-01 2012-09-30     1     #>  7       2 Active 2011-05-27 NA        2012-10-01 2012-12-31     1     #>  8       2 Active 2011-05-27 NA        2013-01-01 2013-03-31     1     #>  9       2 Active 2011-05-27 NA        2013-04-01 2013-06-30     1     #> 10       2 Active 2011-05-27 NA        2013-07-01 2013-09-30     1     #> # ℹ 28 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"convenience-functions","dir":"Articles","previous_headings":"Other exposure periods","what":"Convenience functions","title":"Exposure calculations","text":"following functions convenience wrappers around expose() target specific exposure type without specifying cal_expo expo_length. expose_py() = exposures policy year expose_pq() = exposures policy quarter expose_pm() = exposures policy month expose_pw() = exposures policy week expose_cy() = exposures calendar year expose_cq() = exposures calendar quarter expose_cm() = exposures calendar month expose_cw() = exposures calendar week","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"split-exposures-by-calendar-period-and-policy-year","dir":"Articles","previous_headings":"","what":"Split exposures by calendar period and policy year","title":"Exposure calculations","text":"common technique used experience studies split calendar years two records: pre-anniversary record post-anniversary record. actxps, can accomplished using expose_split() function. Let’s continue examining second policy. exposed_cal, contains calendar year exposures, passed expose_split(). resulting data frame now contains 19 records instead 10. one record 2011 2 records years. year 2011 single record policy issued year, can post-anniversary record. output expose_split() contains two exposure columns. exposure_pol contains policy year exposures exposure_cal contains calendar year exposures two exposure bases often match two reasons: Calendar years policy years different start end dates may may include leap day. first row, calendar year exposure 0.6 years year 2011, include leap day. second row, policy year exposure 0.5984 years policy year spanning 2011-05-27 2012-05-26, include leap day. Application annual exposure method. termination event interest appears post-anniversary record, policy exposures 1 calendar exposures fraction year spanning anniversary December 31st. Conversely, termination event interest appears pre-anniversary record, calendar exposures 1 policy exposures fraction policy year January 1st last day current policy year. may sound confusing first, rules important ensure termination event interest always exposure 1 data grouped calendar year policy year basis. downstream functions like exp_stats() expect exposed_df objects single column exposures. split exposures, exposure basis must specified using col_exposure argument. expose_split() doesn’t just work calendar year exposures. Calendar quarters, months, weeks can also split. periods shorter year, record split pre- post-anniversary segments policy anniversary appears middle period. Note, however, calendar period exposures always expressed original units policy exposures always expressed years. , calendar exposures quarters whereas policy exposures years.","code":"split <- expose_split(exposed_cal)  split |> filter(pol_num == 2) |>    select(cal_yr, cal_yr_end, pol_yr, exposure_pol, exposure_cal) #>  #> ── Exposure data ── #>  #> • Exposure type: split_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 19 × 5 #>    cal_yr     cal_yr_end pol_yr exposure_pol exposure_cal #>    <date>     <date>      <int>        <dbl>        <dbl> #>  1 2011-05-27 2011-12-31      1        0.598        0.6   #>  2 2012-01-01 2012-05-26      1        0.402        0.402 #>  3 2012-05-27 2012-12-31      2        0.6          0.598 #>  4 2013-01-01 2013-05-26      2        0.4          0.4   #>  5 2013-05-27 2013-12-31      3        0.6          0.6   #>  6 2014-01-01 2014-05-26      3        0.4          0.4   #>  7 2014-05-27 2014-12-31      4        0.6          0.6   #>  8 2015-01-01 2015-05-26      4        0.4          0.4   #>  9 2015-05-27 2015-12-31      5        0.598        0.6   #> 10 2016-01-01 2016-05-26      5        0.402        0.402 #> 11 2016-05-27 2016-12-31      6        0.6          0.598 #> 12 2017-01-01 2017-05-26      6        0.4          0.4   #> 13 2017-05-27 2017-12-31      7        0.6          0.6   #> 14 2018-01-01 2018-05-26      7        0.4          0.4   #> 15 2018-05-27 2018-12-31      8        0.6          0.6   #> 16 2019-01-01 2019-05-26      8        0.4          0.4   #> 17 2019-05-27 2019-12-31      9        0.598        0.6   #> 18 2020-01-01 2020-05-26      9        0.402        0.402 #> 19 2020-05-27 2020-12-31     10        0.304        0.303 exp_stats(split) #> ✖ A `split_exposed_df` was passed without clarifying which exposure basis should be used to summarize results. #> ℹ Pass \"exposure_pol\" to `col_exposure` for policy year exposures. #> ℹ Pass \"exposure_cal\" to `col_exposure` for calendar exposures. exp_stats(split, col_exposure = \"exposure_pol\") #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1        1      1     35.3 0.0283 expose_cq(toy_census, \"2022-12-31\", target_status = \"Surrender\") |>    expose_split() |>    filter(pol_num == 2) |>    select(cal_qtr, cal_qtr_end, pol_yr, exposure_pol, exposure_cal) #>  #> ── Exposure data ── #>  #> • Exposure type: split_quarter #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 47 × 5 #>    cal_qtr    cal_qtr_end pol_yr exposure_pol exposure_cal #>    <date>     <date>       <int>        <dbl>        <dbl> #>  1 2011-05-27 2011-06-30       1       0.0956        0.385 #>  2 2011-07-01 2011-09-30       1       0.251         1     #>  3 2011-10-01 2011-12-31       1       0.251         1     #>  4 2012-01-01 2012-03-31       1       0.249         1     #>  5 2012-04-01 2012-05-26       1       0.153         0.615 #>  6 2012-05-27 2012-06-30       2       0.0959        0.385 #>  7 2012-07-01 2012-09-30       2       0.252         1     #>  8 2012-10-01 2012-12-31       2       0.252         1     #>  9 2013-01-01 2013-03-31       2       0.247         1     #> 10 2013-04-01 2013-05-26       2       0.153         0.615 #> # ℹ 37 more rows"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"tidymodels-recipe-step","dir":"Articles","previous_headings":"","what":"Tidymodels recipe step","title":"Exposure calculations","text":"machine learning feature engineering, actxps package contains function called step_expose() compatible recipes package tidymodels. function applies expose() function within recipe.","code":"library(recipes) #>  #> Attaching package: 'recipes' #> The following object is masked from 'package:stats': #>  #>     step  expo_rec <- recipe(status ~ ., toy_census) |>   step_expose(end_date = \"2022-12-31\", target_status = \"Surrender\",               options = list(expo_length = \"month\")) |>   prep()  expo_rec #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> outcome:   1 #> predictor: 3 #>  #> ── Training information #> Training data contained 3 data points and 1 incomplete row. #>  #> ── Operations #> • Exposed data based on policy months for target status Surrender: <none> | #>   Trained  tidy(expo_rec, number = 1) #> # A tibble: 1 × 4 #>   exposure_type target_status start_date end_date   #>   <chr>         <chr>         <date>     <chr>      #> 1 policy_month  Surrender     1900-01-01 2022-12-31  bake(expo_rec, new_data = NULL) #> # A tibble: 416 × 7 #>    issue_date term_date status pol_mth pol_date_mth pol_date_mth_end exposure #>    <date>     <date>    <fct>    <int> <date>       <date>              <dbl> #>  1 2010-01-01 NA        Active       1 2010-01-01   2010-01-31              1 #>  2 2010-01-01 NA        Active       2 2010-02-01   2010-02-28              1 #>  3 2010-01-01 NA        Active       3 2010-03-01   2010-03-31              1 #>  4 2010-01-01 NA        Active       4 2010-04-01   2010-04-30              1 #>  5 2010-01-01 NA        Active       5 2010-05-01   2010-05-31              1 #>  6 2010-01-01 NA        Active       6 2010-06-01   2010-06-30              1 #>  7 2010-01-01 NA        Active       7 2010-07-01   2010-07-31              1 #>  8 2010-01-01 NA        Active       8 2010-08-01   2010-08-31              1 #>  9 2010-01-01 NA        Active       9 2010-09-01   2010-09-30              1 #> 10 2010-01-01 NA        Active      10 2010-10-01   2010-10-31              1 #> # ℹ 406 more rows"},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"column-names","dir":"Articles","previous_headings":"Miscellaneous","what":"Column names","title":"Exposure calculations","text":"default, expose() functions assume census data frame uses following naming conventions: policy number column called pol_num status column called status issue date column called issue_date termination date column called term_date default names can overridden using col_pol_num, col_status, col_issue_date, col_term_date arguments. example, policy number column called id census-level data, write:","code":"expose(toy_census, end_date = \"2022-12-31\",         target_status = \"Surrender\",        col_pol_num = \"id\")"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"treatment-of-additional-columns-in-the-census-data","dir":"Articles","previous_headings":"Miscellaneous","what":"Treatment of additional columns in the census data","title":"Exposure calculations","text":"census-level data contains policy attributes like plan type policy values, broadcast across exposure periods. Depending nature data, may may desirable. Constant policy attributes like plan type make sense broadcast, numeric values may may depending circumstances. experience study requires numeric feature varies time (ex: policy values, crediting rates, etc.), can always attach exposed_df object using join function.","code":"toy_census2 <- toy_census |>    mutate(plan_type = c(\"X\", \"Y\", \"Z\"),           policy_value = c(100, 125, 90))  expose(toy_census2, end_date = \"2022-12-31\",         target_status = \"Surrender\") #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 36 × 10 #>    pol_num status issue_date term_date plan_type policy_value pol_yr #>      <int> <fct>  <date>     <date>    <chr>            <dbl>  <int> #>  1       1 Active 2010-01-01 NA        X                  100      1 #>  2       1 Active 2010-01-01 NA        X                  100      2 #>  3       1 Active 2010-01-01 NA        X                  100      3 #>  4       1 Active 2010-01-01 NA        X                  100      4 #>  5       1 Active 2010-01-01 NA        X                  100      5 #>  6       1 Active 2010-01-01 NA        X                  100      6 #>  7       1 Active 2010-01-01 NA        X                  100      7 #>  8       1 Active 2010-01-01 NA        X                  100      8 #>  9       1 Active 2010-01-01 NA        X                  100      9 #> 10       1 Active 2010-01-01 NA        X                  100     10 #> # ℹ 26 more rows #> # ℹ 3 more variables: pol_date_yr <date>, pol_date_yr_end <date>, #> #   exposure <dbl> # Illustrative example - assume `values` is a data frame containing the columns pol_num and pol_yr.  exposed_data |>    left_join(values, by = c(\"pol_num\", \"pol_yr\"))"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"stacking-exposed_df-objects","dir":"Articles","previous_headings":"Miscellaneous","what":"Stacking exposed_df objects","title":"Exposure calculations","text":"need stack two exposed_df objects, vctrs::vec_rbind() recommended rbind() dplyr::bind_rows(). advantage vctrs::vec_rbind() combine attributes across exposed_df objects passed function. study end date updated maximum study end date. Similarly, study start date set earliest study start date. Target statuses transactions types become super set observed values. two functions retain attributes first object passed . example, exposed_data2 contains study start end dates study range exposed_data. addition, object contains target status “Surrender” whereas exposed_data none. vctrs::vec_rbind() used combine exposed_data exposed_data2, result combines attributes across objects. dplyr::bind_rows() used instead, attributes exposed_data shown, likely incorrect. order stack exposed_df objects, exposure period types lengths must match. , error thrown. example, policy year exposure records combined calendar month records. Ordinary data frames can stacked exposed_df objects using dplyr::bind_rows() rbind() (assuming column names match). exposed_df object first argument, exposed_df class preserved original attributes.","code":"exposed_data2 <- expose(toy_census,                          end_date = \"2023-12-31\",                          start_date = \"1890-01-01\",                         target_status = \"Surrender\")  vctrs::vec_rbind(exposed_data, exposed_data2) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1890-01-01 to 2023-12-31 #>  #> # A tibble: 73 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>  <date>     <date>     <int> <date>      <date>          #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31      #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31      #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31      #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31      #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31      #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31      #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31      #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31      #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31      #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31      #> # ℹ 63 more rows #> # ℹ 1 more variable: exposure <dbl> dplyr::bind_rows(exposed_data, exposed_data2) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 73 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>  <date>     <date>     <int> <date>      <date>          #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31      #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31      #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31      #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31      #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31      #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31      #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31      #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31      #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31      #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31      #> # ℹ 63 more rows #> # ℹ 1 more variable: exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"dplyr-verb-methods-and-exposed_df-class-persistence","dir":"Articles","previous_headings":"Miscellaneous","what":"dplyr verb methods and exposed_df class persistence","title":"Exposure calculations","text":"actxps package includes exposed_df methods dplyr verbs listed . methods ensure functions always return exposed_df object. dplyr::select() dplyr::mutate() dplyr::filter() dplyr::arrange() dplyr::group_by() dplyr::ungroup() dplyr::slice() dplyr::rename() dplyr::relocate() dplyr::left_join() dplyr::right_join() dplyr::inner_join() dplyr::full_join() dplyr::semi_join() dplyr::anti_join() Generally speaking, dplyr verbs aren’t listed return data frames preserve exposed_df class long data grouped. data grouped, exposed_df class may persist. creates problems code, two options: groups don’t matter function applied data, ungroup() data, call function, restore groups group_by(). groups matter function applied data, convert data ordinary data frame tibble, call function, convert data exposed_df using as_exposed_df().","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/exposures.html","id":"limitations","dir":"Articles","previous_headings":"Miscellaneous","what":"Limitations","title":"Exposure calculations","text":"expose() family support studies multiple changes active status inactive status.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/misc.html","id":"working-with-aggregate-experience-data","dir":"Articles","previous_headings":"","what":"Working with aggregate experience data","title":"Other functions","text":"Seriatim-level policy experience data often available analysis. almost always case industry studies contain experience data submitted multiple parties. cases, experience grouped several common policy attributes aggregated accordingly. typical workflow actxps expose() |> exp_stats() termination studies expose() |> add_transactions() |> trx_stats() transaction studies doesn’t apply starting data aggregated. another party already gone steps creating exposure records performing initial level aggregation. Actxps provides two functions designed work aggregate experience data. termination studies, as_exp_df() converts data frame aggregate experience exp_df object, class returned exp_stats() = transaction studies, as_trx_df() converts data frame aggregate experience trx_df object, class returned trx_stats() object classes summary() method summarizes experience across grouping variables passed function. output summary() always another exp_df (trx_df) object, look just like results exp_stats() (trx_stats()). downstream reporting, summary results can passed visualization functions autoplot() autotable(). agg_sim_dat data set contains aggregate experience theoretical block deferred annuity contracts. , as_exp_df() used convert data exp_df, summary() called using multiple grouping variables. Results summarized policy year Results summarized income guarantee presence product as_exp_df() as_trx_df() contain several arguments optional calculations like confidence intervals, expected values, weighting variables, . arguments mirror functionality exp_stats() trx_stats(). functions also contain multiple arguments specifying column names associated required values like exposures claims.","code":"agg_sim_exp_df <- agg_sim_dat |>    as_exp_df(col_exposure = \"exposure_n\", col_claims = \"claims_n\",             conf_int = TRUE,             start_date = 2005, end_date = 2019, target_status = \"Surrender\") summary(agg_sim_exp_df, pol_yr) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 2005 to 2019 #>  #> # A tibble: 15 × 7 #>    pol_yr n_claims claims exposure   q_obs q_obs_lower q_obs_upper #>     <int>    <int>  <int>    <dbl>   <dbl>       <dbl>       <dbl> #>  1      1      102    102   19252. 0.00530     0.00431     0.00634 #>  2      2      160    160   17715. 0.00903     0.00768     0.0104  #>  3      3      124    124   16097. 0.00770     0.00640     0.00907 #>  4      4      168    168   14536. 0.0116      0.00984     0.0133  #>  5      5      164    164   12916. 0.0127      0.0108      0.0146  #>  6      6      152    152   11376. 0.0134      0.0113      0.0155  #>  7      7      164    164    9917. 0.0165      0.0141      0.0191  #>  8      8      190    190    8448. 0.0225      0.0194      0.0257  #>  9      9      181    181    6960. 0.0260      0.0223      0.0297  #> 10     10      152    152    5604. 0.0271      0.0230      0.0314  #> 11     11      804    804    4390. 0.183       0.172       0.195   #> 12     12      330    330    2663. 0.124       0.112       0.137   #> 13     13       99     99    1620. 0.0611      0.0500      0.0728  #> 14     14       62     62     872. 0.0711      0.0551      0.0883  #> 15     15       17     17     268. 0.0634      0.0373      0.0932 summary(agg_sim_exp_df, inc_guar, product) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar and product #> • Target status: Surrender #> • Study range: 2005 to 2019 #>  #> # A tibble: 6 × 8 #>   inc_guar product n_claims claims exposure  q_obs q_obs_lower q_obs_upper #>   <lgl>    <fct>      <int>  <int>    <dbl>  <dbl>       <dbl>       <dbl> #> 1 FALSE    a            449    449   12738. 0.0352      0.0321      0.0385 #> 2 FALSE    b            392    392   13490. 0.0291      0.0262      0.0320 #> 3 FALSE    c            760    760   25895. 0.0293      0.0273      0.0314 #> 4 TRUE     a            361    361   19966. 0.0181      0.0163      0.0199 #> 5 TRUE     b            273    273   19694. 0.0139      0.0122      0.0155 #> 6 TRUE     c            634    634   40851. 0.0155      0.0143      0.0167"},{"path":"https://mattheaphy.github.io/actxps/articles/misc.html","id":"policy-duration-functions","dir":"Articles","previous_headings":"","what":"Policy duration functions","title":"Other functions","text":"pol_() family functions calculates policy years, months, quarters, weeks. function accepts vector dates vector issue dates. Example: assume policy issued 2022-05-10 interested calculating various policy duration values end calendar years 2022-2032.","code":"dates <- date_build(2022 + 0:10, 12, 31)  # policy years pol_yr(dates, \"2022-05-10\") #>  [1]  1  2  3  4  5  6  7  8  9 10 11  # policy quarters pol_qtr(dates, \"2022-05-10\") #>  [1]  3  7 11 15 19 23 27 31 35 39 43  # policy months pol_mth(dates, \"2022-05-10\") #>  [1]   8  20  32  44  56  68  80  92 104 116 128  # policy weeks pol_wk(dates, \"2022-05-10\") #>  [1]  34  86 139 191 243 295 347 399 452 504 556"},{"path":"https://mattheaphy.github.io/actxps/articles/misc.html","id":"predictive-modeling-support-functions","dir":"Articles","previous_headings":"","what":"Predictive modeling support functions","title":"Other functions","text":"add_predictions() function attaches predictions model predict() method. , simple logistic regression model fit surrender experience first ten policy years. Predictions model added exposure records using add_predictions(). function requires data frame exposure records model predict() method. Often, necessary specify additional model-specific arguments like type ensure predict() returns desired output. example , type set “response” return probabilities instead default predictions log-odds scale. col_expected argument used rename column(s) containing predicted values. names specified, default name “expected”.  addition, users tidymodels framework, actxps package includes recipe step function, step_expose(), can apply expose() function data preprocessing.","code":"# create exposure records exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                        target_status = \"Surrender\") |>    filter(pol_yr <= 10) |>    # add a response column for surrenders   mutate(surrendered = status == \"Surrender\")  # create a simple logistic model mod <- glm(surrendered ~ pol_yr, data = exposed_data,             family = \"binomial\", weights = exposure)  exp_res <- exposed_data |>    # attach predictions   add_predictions(mod, type = \"response\", col_expected = \"logistic\") |>    # summarize results   group_by(pol_yr) |>    exp_stats(expected = \"logistic\")   # create a plot plot_termination_rates(exp_res) library(recipes) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'recipes' #> The following object is masked from 'package:stats': #>  #>     step  recipe(~ ., data = census_dat) |>    step_expose(end_date = \"2019-12-31\", target_status = \"Surrender\") #>  #> ── Recipe ────────────────────────────────────────────────────────────────────── #>  #> ── Inputs #> Number of variables by role #> predictor: 11 #>  #> ── Operations #> • Exposed data based on policy years for target status Surrender: <none>"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"simulated-transaction-and-account-value-data","dir":"Articles","previous_headings":"","what":"Simulated transaction and account value data","title":"Transaction studies","text":"example, ’ll using census_dat, withdrawals, account_vals data sets. data set based theoretical block deferred annuity business guaranteed lifetime income benefit. census_dat contains census-level information one row per policy withdrawals contains withdrawal transactions. 2 types transactions data: “Base” (ordinary withdrawals) “Rider” (guaranteed income payments). account_vals contains historical account values policy anniversaries. data used calculate withdrawal rates percentage account values.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"the-add_transactions-function","dir":"Articles","previous_headings":"","what":"The add_transactions() function","title":"Transaction studies","text":"add_transactions() function attaches transactions data frame exposure-level records. data frame must class exposed_df. example, first need convert census_dat exposure records using expose() function.1 example use policy year exposures. withdrawals data 4 columns required attaching transactions: pol_num: policy number trx_date: transaction date trx_type: transaction type trx_amt: transaction amount grain data one row per policy per transaction. expectation number records transaction data match number rows exposure data. policies zero several transactions given exposure period. add_transactions() function uses non-equivalent join associate transaction policy number date interval found exposure data. , transaction counts amounts summarized one row per exposure period. event multiple transaction types found data, separate columns created transaction type. Using example, pass exposure withdrawals data add_transactions(). resulting data number rows original exposure data 4 new columns: trx_amt_Base: sum “Base” withdrawal transactions trx_amt_Rider: sum “Rider” withdrawal transactions trx_n_Base: number “Base” withdrawal transactions trx_n_Rider: number “Rider” withdrawal transactions print exposed_trx, can see still exposed_df object, now additional attribute transaction types attached.","code":"library(actxps) #>  #> Attaching package: 'actxps' #> The following object is masked from 'package:stats': #>  #>     filter library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  exposed_data <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\") exposed_data #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 5 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl> withdrawals #> # A tibble: 160,130 × 4 #>    pol_num trx_date   trx_type trx_amt #>      <int> <date>     <fct>      <dbl> #>  1       2 2007-10-05 Base          25 #>  2       2 2009-07-30 Base          12 #>  3       2 2010-02-22 Base           7 #>  4       2 2010-12-30 Base          52 #>  5       2 2012-05-07 Base          41 #>  6       2 2013-03-15 Base           1 #>  7       2 2013-12-06 Base           2 #>  8       2 2015-05-18 Base           2 #>  9       2 2016-05-10 Base           8 #> 10       2 2017-01-08 Base           2 #> # ℹ 160,120 more rows exposed_trx <- add_transactions(exposed_data, withdrawals) glimpse(exposed_trx) #> Rows: 141,252 #> Columns: 19 #> $ pol_num         <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ status          <fct> Active, Active, Active, Active, Active, Active, Active… #> $ issue_date      <date> 2014-12-17, 2014-12-17, 2014-12-17, 2014-12-17, 2014-… #> $ inc_guar        <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALS… #> $ qual            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE… #> $ age             <int> 56, 56, 56, 56, 56, 56, 71, 71, 71, 71, 71, 71, 71, 71… #> $ product         <fct> b, b, b, b, b, b, a, a, a, a, a, a, a, a, a, a, a, a, … #> $ gender          <fct> F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, … #> $ wd_age          <int> 77, 77, 77, 77, 77, 77, 71, 71, 71, 71, 71, 71, 71, 71… #> $ premium         <dbl> 370, 370, 370, 370, 370, 370, 708, 708, 708, 708, 708,… #> $ term_date       <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ pol_yr          <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1… #> $ pol_date_yr     <date> 2014-12-17, 2015-12-17, 2016-12-17, 2017-12-17, 2018-… #> $ pol_date_yr_end <date> 2015-12-16, 2016-12-16, 2017-12-16, 2018-12-16, 2019-… #> $ exposure        <dbl> 1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.0000… #> $ trx_amt_Base    <dbl> 0, 0, 0, 0, 0, 0, 25, 12, 7, 52, 41, 1, 2, 2, 8, 2, 44… #> $ trx_amt_Rider   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ trx_n_Base      <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ trx_n_Rider     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … exposed_trx #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 141,252 × 19 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 9 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl>, trx_amt_Base <dbl>, #> #   trx_amt_Rider <dbl>, trx_n_Base <dbl>, trx_n_Rider <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"the-trx_stats-function","dir":"Articles","previous_headings":"","what":"The trx_stats() function","title":"Transaction studies","text":"actxps package’s workhorse function summarizing transaction experience trx_stats(). function returns trx_df object, type data frame containing additional attributes transaction study. minimum, trx_df includes following transaction type (trx_type): number transactions (trx_n) number exposure periods transaction (trx_flag) sum transactions (trx_amt) total exposure (exposure) average transaction amount transaction occurs (avg_trx) average transaction amount across records (avg_all) transaction frequency transaction occurs (trx_freq = trx_n / trx_flag) transaction utilization (trx_util = trx_flag / exposure) Optionally, trx_df can also include: grouping variables attached input data Transaction amounts percentage another value transaction occurs (pct_of_*_w_trx) Transaction amounts percentage another value across records (pct_of_*_all) use trx_stats(), simply need pass exposed_df object transactions attached.2 results show us specified groups, output data contains single row transaction type.","code":"trx_stats(exposed_trx) #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 2 × 9 #>   trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 Base     60500    28224 1093899   124173    38.8    8.81     2.14    0.227 #> 2 Rider    77321    35941 2842729   124173    79.1   22.9      2.15    0.289"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"grouped-data","dir":"Articles","previous_headings":"The trx_stats() function","what":"Grouped data","title":"Transaction studies","text":"data frame passed trx_stats() grouped using dplyr::group_by(), resulting output contain one record transaction type unique group. following, exposed_trx grouped presence income guarantee (inc_guar) passed trx_stats(). results four rows two types transactions two distinct values inc_guar. Multiple grouping variables allowed. , policy year (pol_yr) added second grouping variable.","code":"exposed_trx |>    group_by(inc_guar) |>    trx_stats() #>  #> ── Transaction study results ── #>  #> • Groups: inc_guar #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 4 × 10 #>   inc_guar trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>   <lgl>    <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl> #> 1 FALSE    Base     52939    24703  952629    48938    38.6   19.5      2.14 #> 2 FALSE    Rider        0        0       0    48938   NaN      0      NaN    #> 3 TRUE     Base      7561     3521  141270    75235    40.1    1.88     2.15 #> 4 TRUE     Rider    77321    35941 2842729    75235    79.1   37.8      2.15 #> # ℹ 1 more variable: trx_util <dbl> exposed_trx |>    group_by(pol_yr, inc_guar) |>    trx_stats() #>  #> ── Transaction study results ── #>  #> • Groups: pol_yr and inc_guar #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 60 × 11 #>    pol_yr inc_guar trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all #>     <int> <lgl>    <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl> #>  1      1 FALSE    Base      6077     2881   98287     7435    34.1   13.2  #>  2      1 FALSE    Rider        0        0       0     7435   NaN      0    #>  3      1 TRUE     Base      1370      633   21590    11106    34.1    1.94 #>  4      1 TRUE     Rider     8077     3778  265312    11106    70.2   23.9  #>  5      2 FALSE    Base      6091     2863   98413     6813    34.4   14.4  #>  6      2 FALSE    Rider        0        0       0     6813   NaN      0    #>  7      2 TRUE     Base      1183      559   18554    10158    33.2    1.83 #>  8      2 TRUE     Rider     8232     3834  288114    10158    75.1   28.4  #>  9      3 FALSE    Base      6016     2813   97285     6176    34.6   15.8  #> 10      3 FALSE    Rider        0        0       0     6176   NaN      0    #> # ℹ 50 more rows #> # ℹ 2 more variables: trx_freq <dbl>, trx_util <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"expressing-transactions-as-a-percentage-of-another-value","dir":"Articles","previous_headings":"","what":"Expressing transactions as a percentage of another value","title":"Transaction studies","text":"transaction study, often want express transaction amounts percentage another value. example, withdrawal study, withdrawal amounts divided account values provides withdrawal rate. study benefit utilization, transactions can divided maximum benefit amount derive benefit utilization rate. addition, actual--expected rates can calculated dividing transactions expected values. column names passed percent_of argument trx_stats(), output contain 4 additional columns “percent ” variable: sum “percent ” variable sum “percent ” variable transaction occurs. columns include suffix _w_trx. Transaction amounts divided “percent ” variable (pct_of_{*}_all) Transaction amounts divided “percent ” variable transaction occurs (pct_of_{*}_w_trx) example, let’s assume ’re interested examining withdrawal transactions percentage account values, available account_vals data frame column av_anniv.","code":"# attach account values data exposed_trx_w_av <- exposed_trx |>    left_join(account_vals, by = c(\"pol_num\", \"pol_date_yr\"))  trx_res <- exposed_trx_w_av |>    group_by(pol_yr, inc_guar) |>    trx_stats(percent_of = \"av_anniv\")  glimpse(trx_res) #> Rows: 60 #> Columns: 15 #> $ pol_yr                <int> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, … #> $ inc_guar              <lgl> FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TR… #> $ trx_type              <chr> \"Base\", \"Rider\", \"Base\", \"Rider\", \"Base\", \"Rider… #> $ trx_n                 <dbl> 6077, 0, 1370, 8077, 6091, 0, 1183, 8232, 6016, … #> $ trx_flag              <int> 2881, 0, 633, 3778, 2863, 0, 559, 3834, 2813, 0,… #> $ trx_amt               <dbl> 98287, 0, 21590, 265312, 98413, 0, 18554, 288114… #> $ exposure              <dbl> 7435, 7435, 11106, 11106, 6813, 6813, 10158, 101… #> $ avg_trx               <dbl> 34.11558, NaN, 34.10742, 70.22552, 34.37408, NaN… #> $ avg_all               <dbl> 13.219502, 0.000000, 1.943994, 23.889069, 14.444… #> $ trx_freq              <dbl> 2.109337, NaN, 2.164297, 2.137904, 2.127489, NaN… #> $ trx_util              <dbl> 0.38749159, 0.00000000, 0.05699622, 0.34017648, … #> $ av_anniv_w_trx        <dbl> 3875306, 0, 865046, 4982082, 3909786, 0, 797932,… #> $ av_anniv              <dbl> 9686914, 9686914, 14679001, 14679001, 9218561, 9… #> $ pct_of_av_anniv_w_trx <dbl> 0.02536238, NaN, 0.02495821, 0.05325324, 0.02517… #> $ pct_of_av_anniv_all   <dbl> 0.010146369, 0.000000000, 0.001470809, 0.0180742…"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"Confidence intervals","title":"Transaction studies","text":"conf_int set TRUE, trx_stats() produce lower upper confidence interval limits observed utilization rate. Confidence intervals constructed assuming binomial distribution. default confidence level 95%. can changed using conf_level argument. , tighter confidence intervals constructed decreasing confidence level 90%. column names passed percent_of, trx_stats() produce additional confidence intervals: Intervals transactions percentage another column transactions occur (pct_of_{*}_w_trx) constructed using normal distribution. Intervals transactions percentage another column regardless transaction utilization (pct_of_{*}_all) calculated assuming aggregate distribution normal mean equal observed transactions variance equal : Var(S)=E(N)×Var(X)+E(X)2×Var(N),      Var(S) = E(N) \\times Var(X) + E(X)^2 \\times Var(N),  S aggregate transactions random variable, X individual transaction amount assumed follow normal distribution, N binomial random variable transaction utilization.","code":"exposed_trx |>    group_by(pol_yr) |>    trx_stats(conf_int = TRUE) |>    select(pol_yr, trx_util, trx_util_lower, trx_util_upper) #>  #> ── Transaction study results ── #>  #> • Groups: pol_yr #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 30 × 4 #>    pol_yr trx_util trx_util_lower trx_util_upper #>     <int>    <dbl>          <dbl>          <dbl> #>  1      1    0.190          0.184          0.195 #>  2      1    0.204          0.198          0.210 #>  3      2    0.202          0.196          0.208 #>  4      2    0.226          0.220          0.232 #>  5      3    0.215          0.208          0.221 #>  6      3    0.248          0.241          0.255 #>  7      4    0.223          0.216          0.230 #>  8      4    0.269          0.262          0.277 #>  9      5    0.233          0.225          0.240 #> 10      5    0.288          0.280          0.296 #> # ℹ 20 more rows exposed_trx |>    group_by(pol_yr) |>    trx_stats(conf_int = TRUE, conf_level = 0.9) |>    select(pol_yr, trx_util, trx_util_lower, trx_util_upper) #>  #> ── Transaction study results ── #>  #> • Groups: pol_yr #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 30 × 4 #>    pol_yr trx_util trx_util_lower trx_util_upper #>     <int>    <dbl>          <dbl>          <dbl> #>  1      1    0.190          0.185          0.194 #>  2      1    0.204          0.199          0.209 #>  3      2    0.202          0.197          0.207 #>  4      2    0.226          0.221          0.231 #>  5      3    0.215          0.209          0.220 #>  6      3    0.248          0.242          0.254 #>  7      4    0.223          0.218          0.229 #>  8      4    0.269          0.263          0.276 #>  9      5    0.233          0.226          0.239 #> 10      5    0.288          0.281          0.295 #> # ℹ 20 more rows exposed_trx_w_av |>    group_by(pol_yr) |>    trx_stats(conf_int = TRUE, percent_of = \"av_anniv\") |>    select(pol_yr, starts_with(\"pct_of\")) |>    glimpse() #> Rows: 30 #> Columns: 7 #> $ pol_yr                      <int> 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, … #> $ pct_of_av_anniv_w_trx       <dbl> 0.02528863, 0.05325324, 0.02484580, 0.0573… #> $ pct_of_av_anniv_all         <dbl> 0.004919864, 0.010888653, 0.005082440, 0.0… #> $ pct_of_av_anniv_w_trx_lower <dbl> 0.02401960, 0.05078956, 0.02362583, 0.0544… #> $ pct_of_av_anniv_w_trx_upper <dbl> 0.02655765, 0.05571692, 0.02606577, 0.0602… #> $ pct_of_av_anniv_all_lower   <dbl> 0.004632812, 0.010297256, 0.004790158, 0.0… #> $ pct_of_av_anniv_all_upper   <dbl> 0.005206917, 0.011480050, 0.005374723, 0.0…"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"autoplot-and-autotable","dir":"Articles","previous_headings":"","what":"autoplot() and autotable()","title":"Transaction studies","text":"autoplot() autotable() functions create visualizations summary tables trx_df objects. See vignette(\"visualizations\") full details functions.","code":"library(ggplot2)  trx_res |>   # remove periods with zero transactions   filter(trx_n > 0) |>    autoplot(y = pct_of_av_anniv_w_trx) trx_res |>    # remove periods with zero transactions   filter(trx_n > 0) |>    # first 10 rows showed for brevity   head(10) |>    autotable()"},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"selecting-and-combining-transaction-types","dir":"Articles","previous_headings":"Miscellaneous","what":"Selecting and combining transaction types","title":"Transaction studies","text":"trx_types argument trx_stats() selects subset transaction types appear output. combine_trx argument set TRUE, transaction types combined group called “” output.","code":"trx_stats(exposed_trx, trx_types = \"Base\") #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base #>  #> # A tibble: 1 × 9 #>   trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 Base     60500    28224 1093899   124173    38.8    8.81     2.14    0.227 trx_stats(exposed_trx, combine_trx = TRUE) #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 1 × 9 #>   trx_type  trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>     <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 All      137821    64165 3936628   124173    61.4    31.7     2.15    0.517"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"partial-exposures-are-removed-as-a-default","dir":"Articles","previous_headings":"Miscellaneous","what":"Partial exposures are removed as a default","title":"Transaction studies","text":"default, trx_stats() removes partial exposures summarizing results. done avoid complexity associated lopsided skew timing transactions. example, transactions can occur monthly basis annually beginning policy year, partial exposures may appropriate. policy exposure 0.5 years taking withdrawals annually beginning year, argument made exposure instead 1 complete year. policy expected take withdrawals 9 months year, ’s clear exposure 0.5 years 0.5 / 0.75 years. override treatment, set full_exposures_only argument FALSE.","code":"trx_stats(exposed_trx, full_exposures_only = FALSE) #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 2 × 9 #>   trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 Base     69430    32379 1271778  132634.    39.3    9.59     2.14    0.244 #> 2 Rider    90700    42139 3361541  132634.    79.8   25.3      2.15    0.318"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"summary-method","dir":"Articles","previous_headings":"Miscellaneous","what":"Summary method","title":"Transaction studies","text":"noted , result trx_stats() trx_df object. summary() function applied trx_df object, data summarized return higher level trx_df object. additional arguments passed, summary() returns single row aggregate results transaction type. additional variable names passed summary() function, output group data variables. example, pol_yr passed summary(), output contain one row per policy year transaction type. Similarly, inc_guar passed summary(), output contain row transaction type unique value inc_guar.","code":"summary(trx_res) #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: av_anniv #>  #> # A tibble: 2 × 13 #>   trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 Base     60500    28224 1093899   124173    38.8    8.81     2.14    0.227 #> 2 Rider    77321    35941 2842729   124173    79.1   22.9      2.15    0.289 #> # ℹ 4 more variables: av_anniv_w_trx <dbl>, av_anniv <dbl>, #> #   pct_of_av_anniv_w_trx <dbl>, pct_of_av_anniv_all <dbl> summary(trx_res, pol_yr) #>  #> ── Transaction study results ── #>  #> • Groups: pol_yr #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: av_anniv #>  #> # A tibble: 30 × 14 #>    pol_yr trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>     <int> <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl> #>  1      1 Base      7447     3514  119877    18541    34.1    6.47     2.12 #>  2      1 Rider     8077     3778  265312    18541    70.2   14.3      2.14 #>  3      2 Base      7274     3422  116967    16971    34.2    6.89     2.13 #>  4      2 Rider     8232     3834  288114    16971    75.1   17.0      2.15 #>  5      3 Base      7061     3309  116357    15397    35.2    7.56     2.13 #>  6      3 Rider     8204     3817  294795    15397    77.2   19.1      2.15 #>  7      4 Base      6596     3080  114987    13790    37.3    8.34     2.14 #>  8      4 Rider     7960     3715  283763    13790    76.4   20.6      2.14 #>  9      5 Base      6093     2847  109918    12234    38.6    8.98     2.14 #> 10      5 Rider     7536     3521  264939    12234    75.2   21.7      2.14 #> # ℹ 20 more rows #> # ℹ 5 more variables: trx_util <dbl>, av_anniv_w_trx <dbl>, av_anniv <dbl>, #> #   pct_of_av_anniv_w_trx <dbl>, pct_of_av_anniv_all <dbl> summary(trx_res, inc_guar) #>  #> ── Transaction study results ── #>  #> • Groups: inc_guar #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: av_anniv #>  #> # A tibble: 4 × 14 #>   inc_guar trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>   <lgl>    <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl> #> 1 FALSE    Base     52939    24703  952629    48938    38.6   19.5      2.14 #> 2 FALSE    Rider        0        0       0    48938   NaN      0      NaN    #> 3 TRUE     Base      7561     3521  141270    75235    40.1    1.88     2.15 #> 4 TRUE     Rider    77321    35941 2842729    75235    79.1   37.8      2.15 #> # ℹ 5 more variables: trx_util <dbl>, av_anniv_w_trx <dbl>, av_anniv <dbl>, #> #   pct_of_av_anniv_w_trx <dbl>, pct_of_av_anniv_all <dbl>"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"column-names","dir":"Articles","previous_headings":"Miscellaneous","what":"Column names","title":"Transaction studies","text":"default, add_transactions() assumes transaction data frame (trx_data) uses following naming conventions: policy number column called pol_num transaction date column called trx_date transaction type column called trx_type transaction amount column called trx_amt default names can overridden using col_pol_num, col_trx_date, col_trx_type, col_trx_amt arguments. example, transaction type column called transaction_code data, write: Similarly, trx_stats() assumes input data uses name exposure exposures. default can overridden using argument col_exposure.","code":"exposed_data |>    add_transactions(withdrawals, col_trx_type = \"transaction_code\")"},{"path":"https://mattheaphy.github.io/actxps/articles/transactions.html","id":"limitations","dir":"Articles","previous_headings":"Miscellaneous","what":"Limitations","title":"Transaction studies","text":"trx_stats() function produce calculations related persistence transactions exposure period exposure period.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"plotting-termination-studies","dir":"Articles","previous_headings":"","what":"Plotting termination studies","title":"Data visualizations","text":"start plotting, need create experience study data. examples use simulated census_dat withdrawals data sets come actxps package. First, exposure records created using expose(). , illustrative expected values withdrawal transactions added data.","code":"library(actxps) library(ggplot2)  # create exposure records exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                        target_status = \"Surrender\")  # add expected values expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  exposed_data <- exposed_data |>    mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03)) |>    # add transactions   add_transactions(withdrawals)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"autoplot-exp_df","dir":"Articles","previous_headings":"Plotting termination studies","what":"autoplot.exp_df","title":"Data visualizations","text":"actxps package provides autoplot() method exp_df objects. Throughout vignette, method name autoplot.exp_df() used distinguish method generic autoplot() function. , exp_df object created using exp_stats(). default plot produced autoplot.exp_df() line plot observed termination rate (q_obs). x variable corresponds first grouping variable exp_df object3.  second grouping variable, mapped onto color.  additional grouping variables beyond two used create facets.  autoplot.exp_df() arguments two means overriding default aesthetics selected autoplot.exp_df(). x, y, color, ... arguments can passed unquoted column names expressions use x, y, color / fill, faceting variables, respectively. mapping argument can passed aesthetic mapping using ggplot2::aes(). argument supplied, x, y, color arguments ignored. Let’s assume want plot number claims instead termination rate, want inc_guar color variable instead product. Using y, color, ... arguments, write:  Alternatively, supply mapping fine-grained control. Note example adds additional mapping linetype otherwise unavailable defaults autoplot.exp_df().  autoplot.exp_df() function defaults percentages y-axis labels. seen immediately preceding example, always appropriate. y_labels function can used pass different labeling function.  set axis scales vary subplot, use scales argument. argument subsequently forwarded ggplot2::facet_wrap(). default value “fixed”, scales identical across subplots. “free_y” passed shown , y-scales vary. “free_x” passed, x-scales vary. “free” passed, x- y-scales vary.  geoms argument can used change plotting geometry. default value “lines”, points lines displayed. “bars” passed, bar plot drawn. “points” passed, scatter plot drawn.  y_log10 argument set TRUE, y-axis plotted logarithmic base ten scale.  autoplot.exp_df() contains handful arguments plotting additional variable y-axis. variable defaults exposures always use area geometry. add second y-axis, set second_axis TRUE. second_y argument specifies variable plotted second y-axis. second_y_labels argument used change labels second y-axis. Since exposures default second y-axis variable, labels defaulted whole number comma format.  Confidence interval error bars can added plot passing conf_int_bars = TRUE. Confidence intervals displayed available selected y variable.","code":"exp_res <- exposed_data |>    group_by(pol_yr) |>    exp_stats(conf_int = TRUE) autoplot(exp_res) exposed_data |>    group_by(pol_yr, inc_guar) |>    exp_stats() |>    autoplot() exp_res2 <- exposed_data |>    group_by(pol_yr, product, inc_guar) |>    exp_stats()   autoplot(exp_res2) autoplot(exp_res2, y = claims, color = inc_guar, product) autoplot(exp_res2,           mapping = aes(x = pol_yr, y = claims, color = inc_guar,                        linetype = inc_guar),           product) autoplot(exp_res2, y = claims, color = inc_guar, product,          y_labels = scales::label_comma(accuracy = 1)) autoplot(exp_res2, scales = \"free_y\") autoplot(exp_res, geoms = \"bars\") autoplot(exp_res, y_log10 = TRUE) autoplot(exp_res, second_axis = TRUE) autoplot(exp_res, conf_int_bars = TRUE)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"plot_termination_rates","dir":"Articles","previous_headings":"Plotting termination studies","what":"plot_termination_rates()","title":"Data visualizations","text":"limitation autoplot.exp_df() doesn’t allow one plot observed termination rates alongside one expected termination rates. type plot common alternative actual--expected ratio plots. plot_termination_rates() function produces plot observed termination rates plus expected termination rates passed expected argument exp_stats(). example , new exp_df object created contains two sets expected surrender rates. object passed plot_termination_rates().  plot , termination rates mapped y variable Series variable specifies color scale. Similar autoplot.exp_df(), x variable first grouping variable (, pol_yr). exp_df object contains credibility-weighted termination rates4, rates can included plot using argument include_cred_adj = TRUE.","code":"exp_res3 <- exposed_data |>    group_by(pol_yr) |>    exp_stats(expected = c(\"expected_1\", \"expected_2\"), credibility = TRUE)  plot_termination_rates(exp_res3) plot_termination_rates(exp_res3, include_cred_adj = TRUE)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"plot_actual_to_expected","dir":"Articles","previous_headings":"Plotting termination studies","what":"plot_actual_to_expected()","title":"Data visualizations","text":"plot_actual_to_expected() function similar plot_termination_rates() except actual--expected ratios plotted y-axis instead.","code":"plot_actual_to_expected(exp_res3)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"relationship-of-plot_termination_rates-and-plot_actual_to_expected-to-autoplot-exp_df","dir":"Articles","previous_headings":"Plotting termination studies","what":"Relationship of plot_termination_rates() and plot_actual_to_expected() to autoplot.exp_df()","title":"Data visualizations","text":"Behind scenes, plot_termination_rates() plot_actual_to_expected() call autoplot() reshaping exp_df object. , arguments passed autoplot.exp_df() described can also passed functions. However, exception: y variable reserved modified. addition, color variable can overridden, discouraged may result odd-looking plots. Since functions automatically create color variable, grouping variables beyond first used create facets. differs autoplot.exp_df() uses grouping variables beyond second create facets","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"plotting-transaction-studies","dir":"Articles","previous_headings":"","what":"Plotting transaction studies","title":"Data visualizations","text":"actxps package also provides autoplot() method trx_df objects. autoplot.trx_df() method arguments autoplot.exp_df(), options described previous section can used transaction studies well. y variable defaults observed transaction frequency (trx_util). Like autoplot.exp_df(), numeric column can mapped onto y-axis using y mapping arguments. defaults, autoplot.trx_df() handles grouping variables autoplot.exp_df(): first grouping variable mapped onto x second grouping variable mapped onto color additional grouping variables used create subplots addition , facets also created transaction type found data.","code":"trx_res <- exposed_data |>    group_by(pol_yr, inc_guar) |>    trx_stats(percent_of = \"premium\")  trx_res |>    autoplot(y = pct_of_premium_all, second_axis = TRUE)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"plot_utilization_rates","dir":"Articles","previous_headings":"Plotting transaction studies","what":"plot_utilization_rates()","title":"Data visualizations","text":"plot_utilization_rates() function creates side--side view transaction frequency severity. type plot useful answering questions like, “percentage customers taking withdrawals quarter, taking withdrawals, average percentage account value taken ?”. Transaction frequency represented utilization rates (trx_util). Severity represented transaction amounts percentage one columns data. severity series begin prefix pct_of_ end suffix _w_trx. suffix refers fact denominator includes records non-zero transactions. Severity series automatically selected based column names passed percent_of argument trx_stats(). “percentage ” columns exist, function plot utilization rates. Like plot_termination_rates() plot_actual_to_expected(), function calls autoplot() reshaping data. arguments passed autoplot.trx_df() can utilized function except y scales. y argument reserved utilization rates, scales argument preset allow differing scales frequency severity subplots.","code":"plot_utilization_rates(trx_res)"},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Data visualizations","text":"autotable() function creates summary tables termination transaction study results. function generic function methods specific exp_df trx_df objects.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"transaction-study-output-example","dir":"Articles","previous_headings":"Tables","what":"Transaction study output example","title":"Data visualizations","text":"Arguments: fontsize multiple increases decreases font size. Values less 100 decrease font size, values greater 100 increase font size. decimals controls number decimal places displayed percentage columns (default = 1) colorful TRUE, conditional color formatting added table. termination studies, color_q_obs color_ae_ specify color palettes used observed termination rates actual--expected ratios, respectively. transaction studies, color_util color_pct_of specify color palettes used utilization rates “percentage ” columns, respectively. inputs must strings referencing discrete color palette available paletteer package. Palettes must form “package::palette”. full list available palettes, see paletteer::palettes_d_names. rename_cols can used relabel columns. input must named list character vector names equal original column names values equal desired column labels. column names created autotable() presentation-ready, however, grouping variables left side table may require updates since default variable names appear data. show_conf_int show_cred_adj can used include confidence intervals credibility-weighted termination rates, available. default, columns included avoid producing overcrowded tables. show_total can used add grand total rows tables.","code":""},{"path":"https://mattheaphy.github.io/actxps/articles/visualizations.html","id":"interactive-shiny-app","dir":"Articles","previous_headings":"","what":"Interactive Shiny app","title":"Data visualizations","text":"exp_shiny() powerful function launches interactive Shiny app containing filters, grouping variables, plots produced autoplot(), tables produced autotable(), exporting capabilities. function requires exposed_df object5. left sidebar app contains filtering widgets organized data type variables passed predictors argument. predictors specified, columns data except policy numbers, statuses, termination dates, exposures, transaction columns used. type widget vary depending data type number unique values predictor. top sidebar, information shown percentage records remaining applying filters. text description active filters also provided. top sidebar also includes “play / pause” switch can pause reactivity app. Pausing good option multiple changes made quick succession, especially underlying data set large. “Grouping variables” box includes widgets select grouping variables summarizing experience. “x” widget determines x variable plot output. Similarly, “Color” “Facets” widgets used color facets. Multiple faceting variable selections allowed. table output, “x”, “Color”, “Facets” particular meaning beyond order grouping variables displayed. “Study type” box always include tab termination studies. transactions attached exposed_df object6, additional section displayed transaction studies. Termination study options include ability activate deactivate expected values, selection optional numeric weighting variable claims exposures, selection control variables. Available expected value choices dictated expected argument. argument specified, columns containing word “expected” assumed expected values. Transaction study options include ability activate deactivate transaction types, optional numeric columns use “percentage ” statistics, option lump transaction types single category. output section includes tabs plots, tables, exporting results. plot tab includes plot various options customization: y: y variable Geometry: plotting geometry - bars, points lines, points Second y-axis: enables second y-axis Second axis y: y variable plot second axis using area geometry. default exposures. Add Smoothing: plots smooth loess curves Confidence intervals: available, add confidence intervals error bars around selected y variable Free y Scales: enables separate y scales plot Log y-axis: plots y-axes log-10 scale gear icon plot contains pop-menu updating size plot. table tab includes table plus pop-menu changing table’s appearance: “Total row”, “Confidence intervals”, “Credibility-weighted termination rates” switches add outputs table. values hidden default prevent -crowding. “Include color scales” switch disables re-enables conditional color formatting. “Decimals” slider controls number decimals displayed percentage fields. “Font size multiple” slider impacts table’s font size export pop-menu contains options saving summarized experience data, plot, table. Data saved CSV file. plot table saved png files.  arguments distinct_max: upper limit number distinct values variable allowed included viable option color facets grouping variables. Default = 25. title: optional title app credibility, conf_level, cred_r: credibility options termination studies. See exp_stats() information. Limited fluctuation credibility estimates 95% confidence within 5% theoretical mean assuming binomial distribution used default. conf_level argument also used confidence intervals termination transaction studies. theme: replace default theme app passing name theme accepted preset argument bslib::bs_theme(). Alternatively, complete theme created bslib::bs_theme() can passed well.","code":""},{"path":"https://mattheaphy.github.io/actxps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Heaphy. Author, maintainer.","code":""},{"path":"https://mattheaphy.github.io/actxps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heaphy M (2025). actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, Create Reports. R package version 1.6.0, https://mattheaphy.github.io/actxps/, https://github.com/mattheaphy/actxps/.","code":"@Manual{,   title = {actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports},   author = {Matt Heaphy},   year = {2025},   note = {R package version 1.6.0,     https://mattheaphy.github.io/actxps/},   url = {https://github.com/mattheaphy/actxps/}, }"},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"actxps-","dir":"","previous_headings":"","what":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"actxps package provides set tools assist creation actuarial experience studies. Experience studies used actuaries explore historical experience across blocks business inform assumption setting projection models. expose() family functions convert census-level records policy calendar year exposure records. exp_stats() function creates experience summary data frames containing observed termination rates claims. Optionally, expected termination rates, actual--expected ratios, limited fluctuation credibility estimates can also returned. add_transactions() function attaches summarized transactions data frame exposure-level records. trx_stats() function creates transaction summary data frames containing transaction counts, amounts, frequencies, utilization. Optionally, transaction amounts can expressed percentage one variables calculate rates actual--expected ratios. autoplot() autotable() functions creates plots tables reporting. exp_shiny() function launches Shiny app allows interactive exploration experience drivers.","code":""},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"actxps package can installed CRAN : install development version GitHub use:","code":"install.packages(\"actxps\") devtools::install_github(\"mattheaphy/actxps\")"},{"path":"https://mattheaphy.github.io/actxps/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports","text":"expanded version demo available vignette(\"actxps\"). actxps package includes simulated census data theoretical deferred annuity product optional guaranteed income rider. grain data one row per policy. Convert census records exposure records one row per policy per year. Create summary grouped policy year presence guaranteed income rider. Calculate actual--expected ratios. First, attach one columns expected termination rates exposure data. , pass column names expected argument exp_stats(). Create visualizations using autoplot() autotable() functions.  Launch Shiny app interactively explore experience data.  Logo Image macrovector Freepik","code":"library(actxps) library(dplyr)  census_dat #> # A tibble: 20,000 × 11 #>    pol_num status  issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>   <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active  2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       2 Surren… 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  3       3 Active  2012-10-06 FALSE    TRUE     62 b       F          63     466 #>  4       4 Surren… 2005-06-27 TRUE     TRUE     62 c       M          62     485 #>  5       5 Active  2019-11-22 FALSE    FALSE    62 c       F          67     978 #>  6       6 Active  2018-09-01 FALSE    TRUE     77 a       F          77    1288 #>  7       7 Active  2011-07-23 TRUE     TRUE     63 a       M          65    1046 #>  8       8 Active  2005-11-08 TRUE     TRUE     58 a       M          58    1956 #>  9       9 Active  2010-09-19 FALSE    FALSE    53 c       M          64    2165 #> 10      10 Active  2012-05-25 TRUE     FALSE    61 b       M          73     609 #> # ℹ 19,990 more rows #> # ℹ 1 more variable: term_date <date> exposed_data <- expose(census_dat, end_date = \"2019-12-31\",                          target_status = \"Surrender\")  exposed_data #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 5 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl> exp_res <- exposed_data |>    group_by(pol_yr, inc_guar) |>    exp_stats()  exp_res #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 30 × 6 #>    pol_yr inc_guar n_claims claims exposure   q_obs #>     <int> <lgl>       <int>  <int>    <dbl>   <dbl> #>  1      1 FALSE          56     56    7720. 0.00725 #>  2      1 TRUE           46     46   11532. 0.00399 #>  3      2 FALSE          92     92    7103. 0.0130  #>  4      2 TRUE           68     68   10612. 0.00641 #>  5      3 FALSE          67     67    6447. 0.0104  #>  6      3 TRUE           57     57    9650. 0.00591 #>  7      4 FALSE         123    123    5799. 0.0212  #>  8      4 TRUE           45     45    8737. 0.00515 #>  9      5 FALSE          97     97    5106. 0.0190  #> 10      5 TRUE           67     67    7810. 0.00858 #> # ℹ 20 more rows expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  # using 2 different expected termination rates exposed_data <- exposed_data |>    mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(exposed_data$inc_guar, 0.015, 0.03))  exp_res <- exposed_data |>    group_by(pol_yr, inc_guar) |>    exp_stats(expected = c(\"expected_1\", \"expected_2\"))  exp_res #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Expected values: expected_1 and expected_2 #>  #> # A tibble: 30 × 10 #>    pol_yr inc_guar n_claims claims exposure   q_obs expected_1 expected_2 #>     <int> <lgl>       <int>  <int>    <dbl>   <dbl>      <dbl>      <dbl> #>  1      1 FALSE          56     56    7720. 0.00725    0.005        0.03  #>  2      1 TRUE           46     46   11532. 0.00399    0.005        0.015 #>  3      2 FALSE          92     92    7103. 0.0130     0.00778      0.03  #>  4      2 TRUE           68     68   10612. 0.00641    0.00778      0.015 #>  5      3 FALSE          67     67    6447. 0.0104     0.0106       0.03  #>  6      3 TRUE           57     57    9650. 0.00591    0.0106       0.015 #>  7      4 FALSE         123    123    5799. 0.0212     0.0133       0.03  #>  8      4 TRUE           45     45    8737. 0.00515    0.0133       0.015 #>  9      5 FALSE          97     97    5106. 0.0190     0.0161       0.03  #> 10      5 TRUE           67     67    7810. 0.00858    0.0161       0.015 #> # ℹ 20 more rows #> # ℹ 2 more variables: ae_expected_1 <dbl>, ae_expected_2 <dbl> autoplot(exp_res) # first 10 rows showed for brevity exp_res |> head(10) |> autotable() exp_shiny(exposed_data)"},{"path":"https://mattheaphy.github.io/actxps/reference/actxps-package.html","id":null,"dir":"Reference","previous_headings":"","what":"actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports — actxps-package","title":"actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports — actxps-package","text":"Experience studies used actuaries explore historical experience across blocks business inform assumption setting activities. package provides functions preparing data, creating studies, visualizing results, beginning assumption development. Experience study methods, including exposure calculations, described : Atkinson & McGarry (2016) \"Experience Study Calculations\" https://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf. limited fluctuation credibility method used 'exp_stats()' function described : Herzog (1999, ISBN:1-56698-374-6) \"Introduction Credibility Theory\".","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/actxps-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"actxps: Create Actuarial Experience Studies: Prepare Data, Summarize Results, and Create Reports — actxps-package","text":"Maintainer: Matt Heaphy mattrmattrs@gmail.com","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add predictions to a data frame — add_predictions","title":"Add predictions to a data frame — add_predictions","text":"Attach predicted values model data frame exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add predictions to a data frame — add_predictions","text":"","code":"add_predictions(.data, model, ..., col_expected = NULL)"},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add predictions to a data frame — add_predictions","text":".data data frame, preferably class exposed_df model model object S3 method predict() ... Additional arguments passed predict() col_expected NULL character vector containing column names value returned predict()","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add predictions to a data frame — add_predictions","text":"data frame exposed_df object one new columns containing predictions.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add predictions to a data frame — add_predictions","text":"function attaches predictions model data frame preferably class exposed_df. model argument must model object S3 method predict() function. method must new data predictions second argument. col_expected argument optional. NULL, names result predict() used. names, default name \"expected\" assumed. event predict() returns multiple values, default name suffixed \"_x\", x = 1 number values returned. value passed, must character vector length result predict()","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add predictions to a data frame — add_predictions","text":"","code":"expo <- expose_py(census_dat, \"2019-12-31\") |>   mutate(surrender = status == \"Surrender\") mod <- glm(surrender ~ inc_guar + pol_yr, expo, family = 'binomial') add_predictions(expo, mod, type = 'response') #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 141,252 × 17 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>  *   <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 7 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl>, surrender <lgl>, expected <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add transactions to an experience study — add_transactions","title":"Add transactions to an experience study — add_transactions","text":"Attach summarized transactions data frame exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add transactions to an experience study — add_transactions","text":"","code":"add_transactions(   .data,   trx_data,   col_pol_num = \"pol_num\",   col_trx_date = \"trx_date\",   col_trx_type = \"trx_type\",   col_trx_amt = \"trx_amt\" )"},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add transactions to an experience study — add_transactions","text":".data data frame exposure-level records class exposed_df. Use as_exposed_df() convert data frame exposed_df object necessary. trx_data data frame containing transactions details. data frame must columns policy numbers, transaction dates, transaction types, transaction amounts. col_pol_num Name column trx_data containing policy number col_trx_date Name column trx_data containing transaction date col_trx_type Name column trx_data containing transaction type col_trx_amt Name column trx_data containing transaction amount","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add transactions to an experience study — add_transactions","text":"exposed_df object two new columns containing transaction counts amounts transaction type found trx_data. exposed_df's trx_types attributes updated include new transaction types found trx_data.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add transactions to an experience study — add_transactions","text":"function attaches transactions exposed_df object. Transactions grouped summarized number rows exposed_df object change. Two columns added output transaction type. columns names pattern trx_n_{*} (transaction counts) trx_amt_{*} (transaction_amounts). Transactions associated exposed_df object matching transactions dates exposure dates ranges found exposed_df. columns containing dates must YYYY-MM-DD format.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/add_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add transactions to an experience study — add_transactions","text":"","code":"expo <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\") add_transactions(expo, withdrawals) #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #>  #> # A tibble: 141,252 × 19 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 9 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl>, trx_amt_Base <dbl>, #> #   trx_amt_Rider <dbl>, trx_n_Base <dbl>, trx_n_Rider <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/agg_sim_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate simulated annuity data — agg_sim_dat","title":"Aggregate simulated annuity data — agg_sim_dat","text":"pre-aggregated version surrender withdrawal experience simulated data sets census_dat, withdrawals, account_vals. data theoretical represent experience specific product.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/agg_sim_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate simulated annuity data — agg_sim_dat","text":"","code":"agg_sim_dat"},{"path":"https://mattheaphy.github.io/actxps/reference/agg_sim_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Aggregate simulated annuity data — agg_sim_dat","text":"data frame containing summarized experience study results grouped policy year, income guarantee presence, tax-qualified status, product. object class tbl_df (inherits tbl, data.frame) 180 rows 16 columns.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/agg_sim_dat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate simulated annuity data — agg_sim_dat","text":"pol_yr Policy year inc_guar Indicates whether policy issued income guarantee qual Indicates whether policy purchased tax-qualified funds product Product: , b, c exposure_n Sum policy year exposures count claims_n Sum claim counts av Sum account value exposure_amt Sum policy year exposures weighted account value claims_amt Sum claims weighted account value av_sq Sum squared account values n Number exposure records wd Sum partial withdrawal transactions wd_n Count partial withdrawal transactions wd_flag Count exposure records partial withdrawal transactions wd_sq Sum squared partial withdrawal transactions av_w_wd Sum account value exposure records partial withdrawal transactions","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Termination summary helper functions — as_exp_df","title":"Termination summary helper functions — as_exp_df","text":"Convert aggregate termination experience studies exp_df class.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Termination summary helper functions — as_exp_df","text":"","code":"as_exp_df(   x,   expected = NULL,   wt = NULL,   col_claims,   col_exposure,   col_n_claims,   col_weight_sq,   col_weight_n,   target_status = NULL,   start_date = as.Date(\"1900-01-01\"),   end_date = NULL,   credibility = FALSE,   conf_level = 0.95,   cred_r = 0.05,   conf_int = FALSE )  is_exp_df(x)"},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Termination summary helper functions — as_exp_df","text":"x object. as_exp_df(), x must data frame. expected character vector containing column names x expected values wt Optional. Length 1 character vector. Name column x containing weights use calculation claims, exposures, partial credibility, confidence intervals. col_claims Optional. Name column x containing claims. assumed default \"claims\". col_exposure Optional. Name column x containing exposures. assumed default \"exposure\". col_n_claims Optional used used wt passed. Name column x containing number claims. col_weight_sq Optional used used wt passed. Name column x containing sum squared weights. col_weight_n Optional used used wt passed. Name column x containing exposure record counts. target_status Character vector target status values. Default value = NULL. start_date Experience study start date. Default value = 1900-01-01. end_date Experience study end date credibility TRUE, future calls summary() include partial credibility weights credibility-weighted termination rates. conf_level Confidence level used Limited Fluctuation credibility method confidence intervals cred_r Error tolerance Limited Fluctuation credibility method conf_int TRUE, future calls summary() include confidence intervals around observed termination rates actual--expected ratios.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Termination summary helper functions — as_exp_df","text":"is_exp_df(), length-1 logical vector. as_exp_df(), exp_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Termination summary helper functions — as_exp_df","text":"is_exp_df() return TRUE x exp_df object. as_exp_df() coerce data frame exp_df object data frame columns exposures claims. as_exp_df() useful working aggregate summaries experience created actxps individual policy information available. converting data exp_df class, summary() can used summarize data grouping variables, autoplot() autotable() available reporting. nothing passed wt, data frame x must include columns containing: Exposures (exposure) Claim counts (claims) wt passed, data must include columns containing: Weighted exposures (exposure) Weighted claims (claims) Claim counts (n_claims) raw sum weights multiplied exposures Exposure record counts (.weight_n) raw sum squared weights (.weight_sq) names parentheses expected column names. data frame passed as_exp_df() uses different column names, can specified using col_* arguments. column name passed wt, columns .weight, .weight_n, .weight_sq used calculate credibility confidence intervals. credibility confidence intervals required, necessary pass anything wt. results as_exp_df() downstream summaries still weighted long exposures claims pre-weighted. target_status, start_date, end_date optional arguments used printing resulting exp_df object.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/as_exp_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Termination summary helper functions — as_exp_df","text":"","code":"# convert pre-aggregated experience into an exp_df object dat <- as_exp_df(agg_sim_dat, col_exposure = \"exposure_n\",                  col_claims = \"claims_n\",                  target_status = \"Surrender\",                  start_date = 2005, end_date = 2019,                  conf_int = TRUE) dat #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 2005 to 2019 #>  #> # A tibble: 180 × 17 #>    pol_yr inc_guar qual  product exposure claims      av exposure_amt claims_amt #>     <int> <lgl>    <lgl> <fct>      <dbl>  <int>   <dbl>        <dbl>      <dbl> #>  1      1 FALSE    FALSE a           880.      3 1204699     1168118.       1236 #>  2      1 FALSE    FALSE b           885.      9 1209902     1154044.       8472 #>  3      1 FALSE    FALSE c          1685.     12 2265030     2170944.       9245 #>  4      1 FALSE    TRUE  a          1073.     11 1433862     1375173.       8851 #>  5      1 FALSE    TRUE  b          1086.      8 1449080     1396136.       7095 #>  6      1 FALSE    TRUE  c          2111.     13 2907067     2794199.      12468 #>  7      1 TRUE     FALSE a          1299.      9 1796934     1744069.       5272 #>  8      1 TRUE     FALSE b          1230.      2 1732269     1662742.       1059 #>  9      1 TRUE     FALSE c          2702.     11 3700302     3590893.       9647 #> 10      1 TRUE     TRUE  a          1601.      5 2234728     2147418.       3354 #> # ℹ 170 more rows #> # ℹ 8 more variables: av_sq <dbl>, n <int>, wd <dbl>, wd_n <dbl>, #> #   wd_flag <int>, wd_sq <dbl>, av_w_wd <dbl>, n_claims <int> is_exp_df(dat) #> [1] TRUE  # summary by policy year summary(dat, pol_yr) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 2005 to 2019 #>  #> # A tibble: 15 × 7 #>    pol_yr n_claims claims exposure   q_obs q_obs_lower q_obs_upper #>     <int>    <int>  <int>    <dbl>   <dbl>       <dbl>       <dbl> #>  1      1      102    102   19252. 0.00530     0.00431     0.00634 #>  2      2      160    160   17715. 0.00903     0.00768     0.0104  #>  3      3      124    124   16097. 0.00770     0.00640     0.00907 #>  4      4      168    168   14536. 0.0116      0.00984     0.0133  #>  5      5      164    164   12916. 0.0127      0.0108      0.0146  #>  6      6      152    152   11376. 0.0134      0.0113      0.0155  #>  7      7      164    164    9917. 0.0165      0.0141      0.0191  #>  8      8      190    190    8448. 0.0225      0.0194      0.0257  #>  9      9      181    181    6960. 0.0260      0.0223      0.0297  #> 10     10      152    152    5604. 0.0271      0.0230      0.0314  #> 11     11      804    804    4390. 0.183       0.172       0.195   #> 12     12      330    330    2663. 0.124       0.112       0.137   #> 13     13       99     99    1620. 0.0611      0.0500      0.0728  #> 14     14       62     62     872. 0.0711      0.0551      0.0883  #> 15     15       17     17     268. 0.0634      0.0373      0.0932   # repeat the prior exercise on a weighted basis dat_wt <- as_exp_df(agg_sim_dat, wt = \"av\",                     col_exposure = \"exposure_amt\",                     col_claims = \"claims_amt\",                     col_n_claims = \"claims_n\",                     col_weight_sq = \"av_sq\",                     col_weight_n = \"n\",                     target_status = \"Surrender\",                     start_date = 2005, end_date = 2019,                     conf_int = TRUE) dat_wt #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 2005 to 2019 #> • Weighted by: av #>  #> # A tibble: 180 × 16 #>    pol_yr inc_guar qual  product exposure_n n_claims .weight exposure claims #>     <int> <lgl>    <lgl> <fct>        <dbl>    <int>   <dbl>    <dbl>  <dbl> #>  1      1 FALSE    FALSE a             880.        3 1204699 1168118.   1236 #>  2      1 FALSE    FALSE b             885.        9 1209902 1154044.   8472 #>  3      1 FALSE    FALSE c            1685.       12 2265030 2170944.   9245 #>  4      1 FALSE    TRUE  a            1073.       11 1433862 1375173.   8851 #>  5      1 FALSE    TRUE  b            1086.        8 1449080 1396136.   7095 #>  6      1 FALSE    TRUE  c            2111.       13 2907067 2794199.  12468 #>  7      1 TRUE     FALSE a            1299.        9 1796934 1744069.   5272 #>  8      1 TRUE     FALSE b            1230.        2 1732269 1662742.   1059 #>  9      1 TRUE     FALSE c            2702.       11 3700302 3590893.   9647 #> 10      1 TRUE     TRUE  a            1601.        5 2234728 2147418.   3354 #> # ℹ 170 more rows #> # ℹ 7 more variables: .weight_sq <dbl>, .weight_n <int>, wd <dbl>, wd_n <dbl>, #> #   wd_flag <int>, wd_sq <dbl>, av_w_wd <dbl>  # summary by policy year summary(dat_wt, pol_yr) #>  #> ── Experience study results ── #>  #> • Groups: pol_yr #> • Target status: Surrender #> • Study range: 2005 to 2019 #> • Weighted by: av #>  #> # A tibble: 15 × 10 #>    pol_yr n_claims  claims  exposure   q_obs q_obs_lower q_obs_upper  .weight #>     <int>    <int>   <dbl>     <dbl>   <dbl>       <dbl>       <dbl>    <dbl> #>  1      1      102   83223 25312813. 0.00329     0.00193     0.00465 26301746 #>  2      2      160  175428 24018741. 0.00730     0.00545     0.00916 24966449 #>  3      3      124  132261 22435291. 0.00590     0.00409     0.00770 23442831 #>  4      4      168  192473 20859830. 0.00923     0.00691     0.0115  21861723 #>  5      5      164  197240 19114538. 0.0103      0.00773     0.0129  20104670 #>  6      6      152  192088 17327030. 0.0111      0.00823     0.0139  18388593 #>  7      7      164  186649 15496358. 0.0120      0.00862     0.0155  16440062 #>  8      8      190  220055 13628469. 0.0161      0.0118      0.0205  14647775 #>  9      9      181  232704 11562793. 0.0201      0.0149      0.0253  12603553 #> 10     10      152  209249  9510599. 0.0220      0.0161      0.0279  10531703 #> 11     11      804 1153832  7654553. 0.151       0.134       0.167    8501473 #> 12     12      330  517875  4895865. 0.106       0.0879      0.124    5713464 #> 13     13       99  179358  3134823. 0.0572      0.0413      0.0731   3678776 #> 14     14       62  114390  1727042. 0.0662      0.0423      0.0902   2343501 #> 15     15       17   26265   520946. 0.0504      0.00836     0.0925   1019390 #> # ℹ 2 more variables: .weight_sq <dbl>, .weight_n <int>"},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Transaction summary helper functions — as_trx_df","title":"Transaction summary helper functions — as_trx_df","text":"Convert aggregate transaction experience studies trx_df class.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transaction summary helper functions — as_trx_df","text":"","code":"as_trx_df(   x,   col_trx_amt = \"trx_amt\",   col_trx_n = \"trx_n\",   col_trx_flag = \"trx_flag\",   col_exposure = \"exposure\",   col_percent_of = NULL,   col_percent_of_w_trx = NULL,   col_trx_amt_sq = \"trx_amt_sq\",   start_date = as.Date(\"1900-01-01\"),   end_date = NULL,   conf_int = FALSE,   conf_level = 0.95 )  is_trx_df(x)"},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transaction summary helper functions — as_trx_df","text":"x object. as_trx_df(), x must data frame. col_trx_amt Optional. Name column x containing transaction amounts. col_trx_n Optional. Name column x containing transaction counts. col_trx_flag Optional. Name column x containing number exposure records transactions. col_exposure Optional. Name column x containing exposures. col_percent_of Optional. Name column x containing numeric variable use \"percent \" calculations. col_percent_of_w_trx Optional. Name column x containing numeric variable use \"percent \" calculations transactions. col_trx_amt_sq Optional required col_percent_of passed conf_int TRUE. Name column x containing squared transaction amounts. start_date Experience study start date. Default value = 1900-01-01. end_date Experience study end date conf_int TRUE, future calls summary() include confidence intervals around observed utilization rates percent_of output columns. conf_level Confidence level confidence intervals","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transaction summary helper functions — as_trx_df","text":"is_trx_df(), length-1 logical vector. as_trx_df(), trx_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transaction summary helper functions — as_trx_df","text":"is_trx_df() return TRUE x trx_df object. as_trx_df() coerce data frame trx_df object data frame required columns transaction studies listed . as_trx_df() useful working aggregate summaries experience created actxps individual policy information available. converting data trx_df class, summary() can used summarize data grouping variables, autoplot() autotable() available reporting. minimum, following columns required: Transaction amounts (trx_amt) Transaction counts (trx_n) number exposure records transactions (trx_flag). number necessarily equal transaction counts. multiple transactions allowed per exposure period, trx_flag less trx_n. Exposures (exposure) transaction amounts expressed percentage another variable (.e. calculate utilization rates actual--expected ratios), additional columns required: denominator \"percent \" column. example, sum account values. denominator \"percent \" column exposure records transactions. example, sum account values across records non-zero transaction amounts. confidence intervals desired \"percent \" columns passed, additional column sum squared transaction amounts (trx_amt_sq) also required. names parentheses expected column names. data frame passed as_trx_df() uses different column names, can specified using col_* arguments. start_date, end_date optional arguments used printing resulting trx_df object. Unlike trx_stats(), as_trx_df() permits single transaction type single percent_of column.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/as_trx_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transaction summary helper functions — as_trx_df","text":"","code":"# convert pre-aggregated experience into a trx_df object dat <- as_trx_df(agg_sim_dat,                  col_exposure = \"n\",                  col_trx_amt = \"wd\",                  col_trx_n = \"wd_n\",                  col_trx_flag = \"wd_flag\",                  col_percent_of = \"av\",                  col_percent_of_w_trx = \"av_w_wd\",                  col_trx_amt_sq = \"wd_sq\",                  start_date = 2005, end_date = 2019,                  conf_int = TRUE) dat #>  #> ── Transaction study results ── #>  #> • Study range: 2005 to 2019 #> • Transaction types: wd #> • Transactions as % of: av #>  #> # A tibble: 180 × 17 #>    pol_yr inc_guar qual  product exposure_n claims_n      av exposure_amt #>     <int> <lgl>    <lgl> <fct>        <dbl>    <int>   <dbl>        <dbl> #>  1      1 FALSE    FALSE a             880.        3 1204699     1168118. #>  2      1 FALSE    FALSE b             885.        9 1209902     1154044. #>  3      1 FALSE    FALSE c            1685.       12 2265030     2170944. #>  4      1 FALSE    TRUE  a            1073.       11 1433862     1375173. #>  5      1 FALSE    TRUE  b            1086.        8 1449080     1396136. #>  6      1 FALSE    TRUE  c            2111.       13 2907067     2794199. #>  7      1 TRUE     FALSE a            1299.        9 1796934     1744069. #>  8      1 TRUE     FALSE b            1230.        2 1732269     1662742. #>  9      1 TRUE     FALSE c            2702.       11 3700302     3590893. #> 10      1 TRUE     TRUE  a            1601.        5 2234728     2147418. #> # ℹ 170 more rows #> # ℹ 9 more variables: claims_amt <dbl>, av_sq <dbl>, exposure <int>, #> #   trx_amt <dbl>, trx_n <dbl>, trx_flag <int>, trx_amt_sq <dbl>, #> #   av_w_trx <dbl>, trx_type <chr> is_trx_df(dat) #> [1] TRUE  # summary by policy year summary(dat, pol_yr) #>  #> ── Transaction study results ── #>  #> • Groups: pol_yr #> • Study range: 2005 to 2019 #> • Transaction types: wd #> • Transactions as % of: av #>  #> # A tibble: 15 × 21 #>    pol_yr trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>     <int> <chr>    <dbl>    <int>   <dbl>    <int>   <dbl>   <dbl>    <dbl> #>  1      1 wd       16942     7921  419763    19995    53.0    21.0     2.14 #>  2      2 wd       16900     7923  440919    18434    55.7    23.9     2.13 #>  3      3 wd       16679     7796  449349    16806    57.6    26.7     2.14 #>  4      4 wd       16193     7575  440510    15266    58.2    28.9     2.14 #>  5      5 wd       15353     7153  420462    13618    58.8    30.9     2.15 #>  6      6 wd       14382     6708  411073    12067    61.3    34.1     2.14 #>  7      7 wd       13248     6183  396732    10541    64.2    37.6     2.14 #>  8      8 wd       12034     5603  369098     9130    65.9    40.4     2.15 #>  9      9 wd       10461     4868  330507     7591    67.9    43.5     2.15 #> 10     10 wd        8978     4155  290363     6185    69.9    46.9     2.16 #> 11     11 wd        7470     3448  243606     4897    70.7    49.7     2.17 #> 12     12 wd        5079     2314  176383     3093    76.2    57.0     2.19 #> 13     13 wd        3310     1495  119153     1937    79.7    61.5     2.21 #> 14     14 wd        2119      946   85073     1182    89.9    72.0     2.24 #> 15     15 wd         982      430   40328      510    93.8    79.1     2.28 #> # ℹ 12 more variables: trx_util <dbl>, av_w_trx <dbl>, av <dbl>, #> #   pct_of_av_w_trx <dbl>, pct_of_av_all <dbl>, trx_util_lower <dbl>, #> #   trx_util_upper <dbl>, pct_of_av_w_trx_lower <dbl>, #> #   pct_of_av_w_trx_upper <dbl>, pct_of_av_all_lower <dbl>, #> #   pct_of_av_all_upper <dbl>, trx_amt_sq <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot experience study results — autoplot_exp","title":"Plot experience study results — autoplot_exp","text":"Plot experience study results","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot experience study results — autoplot_exp","text":"","code":"# S3 method for class 'exp_df' autoplot(   object,   ...,   x = NULL,   y = NULL,   color = NULL,   mapping,   second_axis = FALSE,   second_y = NULL,   scales = \"fixed\",   geoms = c(\"lines\", \"bars\", \"points\"),   y_labels = scales::label_percent(accuracy = 0.1),   second_y_labels = scales::label_comma(accuracy = 1),   y_log10 = FALSE,   conf_int_bars = FALSE )  # S3 method for class 'trx_df' autoplot(   object,   ...,   x = NULL,   y = NULL,   color = NULL,   mapping,   second_axis = FALSE,   second_y = NULL,   scales = \"fixed\",   geoms = c(\"lines\", \"bars\", \"points\"),   y_labels = scales::label_percent(accuracy = 0.1),   second_y_labels = scales::label_comma(accuracy = 1),   y_log10 = FALSE,   conf_int_bars = FALSE )"},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot experience study results — autoplot_exp","text":"object object class exp_df created function exp_stats() object class trx_df created function trx_stats(). ... Faceting variables passed ggplot2::facet_wrap(). x unquoted column name object expression use x variable. y unquoted column name object expression use y variable. unspecified, y default observed termination rate (q_obs) exp_df objects observed utilization rate (trx_util) trx_df objects. color unquoted column name object expression use color fill variables. mapping Aesthetic mapping passed ggplot2::ggplot(). NOTE: mapping supplied, x, y, color arguments ignored. second_axis Logical. TRUE, variable specified second_y (default = exposure) plotted second y-axis using area geometry. second_y unquoted column name object use y variable second y-axis. unspecified, default exposure. scales scales argument passed ggplot2::facet_wrap(). geoms Type geometry. \"lines\" passed, plot display lines points. \"bars\", plot display bars. \"points\", plot display points . y_labels Label function passed ggplot2::scale_y_continuous(). second_y_labels y_labels, second y-axis. y_log10 TRUE, y-axes plotted log-10 scale. conf_int_bars TRUE, confidence interval error bars included plot. exp_df objects, option available termination rates actual--expected ratios. trx_df objects, option available utilization rates pct_of columns.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot experience study results — autoplot_exp","text":"ggplot object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot experience study results — autoplot_exp","text":"aesthetic map supplied, plot use first grouping variable object x axis q_obs y axis. addition, second grouping variable object used color fill. faceting variables supplied, plot use grouping variables 3 facets. variables passed ggplot2::facet_wrap(). Specific trx_df objects, transaction type (trx_type) also added faceting variable.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/autoplot_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot experience study results — autoplot_exp","text":"","code":"study_py <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\")  study_py <- study_py |>   add_transactions(withdrawals)  exp_res <- study_py |> group_by(pol_yr) |> exp_stats() autoplot(exp_res)   trx_res <- study_py |> group_by(pol_yr) |> trx_stats() autoplot(trx_res)"},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabular experience study summary — autotable","title":"Tabular experience study summary — autotable","text":"autotable() generic function used create table object particular class. Tables constructed using gt package. autotable.exp_df() used convert experience study results presentation-friendly format. autotable.trx_df() used convert transaction study results presentation-friendly format.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular experience study summary — autotable","text":"","code":"autotable(object, ...)  # S3 method for class 'exp_df' autotable(   object,   fontsize = 100,   decimals = 1,   colorful = TRUE,   color_q_obs = \"RColorBrewer::GnBu\",   color_ae_ = \"RColorBrewer::RdBu\",   rename_cols = rlang::list2(...),   show_conf_int = FALSE,   show_cred_adj = FALSE,   decimals_amt = 0,   suffix_amt = FALSE,   show_total = FALSE,   ... )  # S3 method for class 'trx_df' autotable(   object,   fontsize = 100,   decimals = 1,   colorful = TRUE,   color_util = \"RColorBrewer::GnBu\",   color_pct_of = \"RColorBrewer::RdBu\",   rename_cols = rlang::list2(...),   show_conf_int = FALSE,   decimals_amt = 0,   suffix_amt = FALSE,   show_total = FALSE,   ... )"},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular experience study summary — autotable","text":"object object class exp_df usually created function exp_stats() object class trx_df created trx_stats() function. ... Additional arguments passed gt::gt(). fontsize Font size percentage multiplier. decimals Number decimals display percentages colorful TRUE, color added observed termination rate actual--expected columns termination studies, utilization rate \"percentage \" columns transaction studies. color_q_obs Color palette used observed termination rate. color_ae_ Color palette used actual--expected rates. rename_cols optional list consisting key-value pairs. can used relabel columns output table. parameter useful renaming grouping variables appear original variable names left unchanged. See gt::cols_label() information. show_conf_int TRUE confidence intervals displayed assuming available object. show_cred_adj TRUE credibility-weighted termination rates displayed assuming available object. decimals_amt Number decimals display amount columns (number claims, claim amounts, exposures, transaction counts, total transactions, average transactions) suffix_amt argument meaning suffixing argument gt::fmt_number() amount columns. FALSE (default), scaling suffixing applied amount columns. TRUE, amount columns automatically scaled suffixed \"K\" (thousands), \"M\" (millions), \"B\" (billions), \"T\" (trillions). See gt::fmt_number() information. show_total TRUE table include grand total row(s). color_util Color palette used utilization rates. color_pct_of Color palette used \"percentage \" columns.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabular experience study summary — autotable","text":"gt object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabular experience study summary — autotable","text":"color_q_obs, color_ae_, color_util, color_pct_of arguments must strings referencing discrete color palette available paletteer package. Palettes must form \"package::palette\". full list available palettes, see paletteer::palettes_d_names.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/autotable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabular experience study summary — autotable","text":"","code":"if (interactive()) {   study_py <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\")   expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))    study_py <- study_py |>     mutate(expected_1 = expected_table[pol_yr],            expected_2 = ifelse(inc_guar, 0.015, 0.03)) |>     add_transactions(withdrawals) |>     left_join(account_vals, by = c(\"pol_num\", \"pol_date_yr\"))    exp_res <- study_py |> group_by(pol_yr) |>     exp_stats(expected = c(\"expected_1\", \"expected_2\"), credibility = TRUE,               conf_int = TRUE)   autotable(exp_res)    trx_res <- study_py |> group_by(pol_yr) |>     trx_stats(percent_of = \"av_anniv\", conf_int = TRUE)   autotable(trx_res) }"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively explore experience data — exp_shiny","title":"Interactively explore experience data — exp_shiny","text":"Launch Shiny application interactively explore drivers experience. dat must exposed_df object. error thrown object type passed. dat transactions attached, app contain features termination transaction studies. Otherwise, app support termination studies. nothing passed predictors, columns names dat used (excluding policy number, status, termination date, exposure, transaction counts, transaction amounts columns). expected argument optional. default, column names containing word \"expected\" used.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively explore experience data — exp_shiny","text":"","code":"exp_shiny(   dat,   predictors = names(dat),   expected = names(dat)[grepl(\"expected\", names(dat))],   distinct_max = 25L,   title,   credibility = TRUE,   conf_level = 0.95,   cred_r = 0.05,   theme = \"shiny\",   col_exposure = \"exposure\" )"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively explore experience data — exp_shiny","text":"dat exposed_df object. predictors character vector independent variables dat include Shiny app. expected character vector expected values dat include Shiny app. distinct_max Maximum number distinct values allowed predictors included \"Color\" \"Facets\" grouping variables. input prevents drawing overly complex plots. Default value = 25. title Optional. Title Shiny app. title provided, descriptive title generated based attributes dat. credibility TRUE, output include partial credibility weights credibility-weighted termination rates. conf_level Confidence level used Limited Fluctuation credibility method confidence intervals cred_r Error tolerance Limited Fluctuation credibility method theme name theme passed preset argument bslib::bs_theme(). Alternatively, complete Bootstrap theme created using bslib::bs_theme(). col_exposure Name column dat containing exposures. input used clarify exposure basis dat split_exposed_df object. information split exposures, see expose_split().","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively explore experience data — exp_shiny","text":"return value. function called side effect launching Shiny application.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"filters","dir":"Reference","previous_headings":"","what":"Filters","title":"Interactively explore experience data — exp_shiny","text":"sidebar contains filtering widgets organized data type variables passed predictors argument. top sidebar, information shown percentage records remaining applying filters. description active filters also provided. top sidebar also includes \"play / pause\" switch can pause reactivity application. Pausing good option multiple changes made quick succession, especially underlying data set large.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"grouping-variables","dir":"Reference","previous_headings":"","what":"Grouping variables","title":"Interactively explore experience data — exp_shiny","text":"box includes widgets select grouping variables summarizing experience. \"x\" widget determines x variable plot output. Similarly, \"Color\" \"Facets\" widgets used color facets. Multiple faceting variable selections allowed. table output, \"x\", \"Color\", \"Facets\" particular meaning beyond order grouping variables displayed.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"study-type","dir":"Reference","previous_headings":"","what":"Study type","title":"Interactively explore experience data — exp_shiny","text":"box includes toggle switch termination studies transaction studies (available). Different options available study type.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"termination-studies","dir":"Reference","previous_headings":"","what":"Termination studies","title":"Interactively explore experience data — exp_shiny","text":"expected values checkboxes used activate deactivate expected values passed expected argument. checkboxes also include \"control\" item expected values derived using control variables. boxes impact table output directly available \"y\" variables plot. \"Weight \" widget used specify column, , contains weights summarizing experience. \"Control variables\" widget used specify columns, , used control variables ( see exp_stats() information).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"transaction-studies","dir":"Reference","previous_headings":"","what":"Transaction studies","title":"Interactively explore experience data — exp_shiny","text":"transaction types checkboxes used activate deactivate transaction types appear plot table outputs. available transaction types taken trx_types attribute dat. plot output, transaction type always appear faceting variable. \"Transactions % \" selector expand list available \"y\" variables plot impact table output directly. Lastly, toggle exists allows transaction types aggregated single group.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"plot","dir":"Reference","previous_headings":"","what":"Plot","title":"Interactively explore experience data — exp_shiny","text":"tab includes plot various options customization: y: y variable Geometry: plotting geometry Second y-axis: activate enable second y-axis Second axis y: y variable plot second axis Add Smoothing: activate plot loess curves Confidence intervals: available, add error bars confidence intervals around selected y variable Free y Scales: activate enable separate y scales plot Log y-axis: activate plot y-axes log-10 scale gear icon plot contains pop-menu can used change size plot exporting.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"table","dir":"Reference","previous_headings":"","what":"Table","title":"Interactively explore experience data — exp_shiny","text":"tab includes data table. gear icon table contains pop-menu can used change appearance table: \"Total row\", \"Confidence intervals\", \"Credibility-weighted termination rates\" switches add outputs table. values hidden default prevent -crowding. \"Include color scales\" switch disables re-enables conditional color formatting. \"Decimals\" slider controls number decimals displayed percentage fields. \"Font size multiple\" slider impacts table's font size","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"export","dir":"Reference","previous_headings":"","what":"Export","title":"Interactively explore experience data — exp_shiny","text":"pop-menu contains options saving summarized experience data, plot, table. Data saved CSV file. plot table saved png files.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively explore experience data — exp_shiny","text":"","code":"if (interactive()) {   study_py <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\")   expected_table <- c(seq(0.005, 0.03, length.out = 10),                       0.2, 0.15, rep(0.05, 3))    study_py <- study_py |>     mutate(expected_1 = expected_table[pol_yr],            expected_2 = ifelse(inc_guar, 0.015, 0.03)) |>     add_transactions(withdrawals) |>     left_join(account_vals, by = c(\"pol_num\", \"pol_date_yr\"))    exp_shiny(study_py) }"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize experience study records — exp_stats","title":"Summarize experience study records — exp_stats","text":"Create summary data frame termination experience given target status.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize experience study records — exp_stats","text":"","code":"exp_stats(   .data,   target_status = attr(.data, \"target_status\"),   expected,   col_exposure = \"exposure\",   col_status = \"status\",   wt = NULL,   credibility = FALSE,   conf_level = 0.95,   cred_r = 0.05,   conf_int = FALSE,   control_vars,   control_distinct_max = 25L )  # S3 method for class 'exp_df' summary(object, ...)"},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize experience study records — exp_stats","text":".data data frame exposure-level records, ideally type exposed_df target_status character vector target status values expected character vector containing column names .data expected values col_exposure Name column .data containing exposures col_status Name column .data containing policy status wt Optional. Length 1 character vector. Name column .data containing weights use calculation claims, exposures, partial credibility, confidence intervals. credibility TRUE, output include partial credibility weights credibility-weighted termination rates. conf_level Confidence level used Limited Fluctuation credibility method confidence intervals cred_r Error tolerance Limited Fluctuation credibility method conf_int TRUE, output include confidence intervals around observed termination rates actual--expected ratios. control_vars \".none\" character vector containing column names .data use control variables control_distinct_max Maximum number unique values allowed control variables object exp_df object ... Groups retain summary() called","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize experience study records — exp_stats","text":"tibble class exp_df, tbl_df, tbl, data.frame. results include columns grouping variables, claims, exposures, observed termination rates (q_obs). values passed expected control_vars, additional columns added expected termination rates actual--expected (/E) ratios. /E ratios prefixed ae_. credibility set TRUE, additional columns added partial credibility credibility-weighted termination rates (assuming values passed expected). Credibility-weighted termination rates prefixed adj_. conf_int set TRUE, additional columns added lower upper confidence interval limits around observed termination rates actual--expected ratios. Additionally, credibility TRUE expected values passed expected, output contain confidence intervals around credibility-weighted termination rates. Confidence interval columns include name original output column suffixed either _lower _upper. value passed wt, additional columns created containing sum weights (.weight), sum squared weights (.weight_qs), number records (.weight_n).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize experience study records — exp_stats","text":".data grouped, resulting data frame contain one row per group. target_status provided, exp_stats() use target status .data class exposed_df. Otherwise, status values except first level assumed. produce warning message.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"expected-values","dir":"Reference","previous_headings":"","what":"Expected values","title":"Summarize experience study records — exp_stats","text":"expected argument optional. provided, argument must character vector values corresponding column names .data containing expected experience. one expected basis can provided.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"control-variables","dir":"Reference","previous_headings":"","what":"Control variables","title":"Summarize experience study records — exp_stats","text":"control_vars argument optional. provided, argument must \".none\" () character vector values corresponding column names .data. Control variables used estimate impact grouping variables observed experience accounting impact control variables. Mechanically, values passed control_vars, separate call made exp_stats() using control variables grouping variables. used derive new expected values basis called control, added .data appended expected argument. final output, column called ae_control shows relative impact grouping variables accounting control variables. \".none\": \".none\" passed control_vars, single aggregate termination rate calculated entire data set used compute control ae_control. control_distinct_max argument places upper limit number unique values control variable allowed . limit exists prevent excessive number groups continuous high-cardinality features. noted usage control variables rough approximation substitute rigorous statistical models. impact control variables calculated isolation consider features possible confounding variables. , control variables useful exploratory data analysis.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"credibility","dir":"Reference","previous_headings":"","what":"Credibility","title":"Summarize experience study records — exp_stats","text":"credibility set TRUE, output contain credibility column equal partial credibility estimate Limited Fluctuation credibility method (also known Classical Credibility) assuming binomial distribution claims.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence intervals","title":"Summarize experience study records — exp_stats","text":"conf_int set TRUE, output contain lower upper confidence interval limits observed termination rate actual--expected ratios. confidence level dictated conf_level. weighting variable passed wt, confidence intervals constructed assuming binomial distribution claims. Otherwise, confidence intervals calculated assuming aggregate claims distribution normal mean equal observed claims variance equal : Var(S) = E(N) * Var(X) + E(X)^2 * Var(N), S aggregate claim random variable, X weighting variable assumed follow normal distribution, N binomial random variable number claims. credibility TRUE expected values passed expected, output also contain confidence intervals credibility-weighted termination rates.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"summary-method","dir":"Reference","previous_headings":"","what":"summary() Method","title":"Summarize experience study records — exp_stats","text":"Applying summary() exp_df object re-summarize data retaining grouping variables passed \"dots\" (...).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize experience study records — exp_stats","text":"Herzog, Thomas (1999). Introduction Credibility Theory","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/exp_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize experience study records — exp_stats","text":"","code":"toy_census |> expose(\"2022-12-31\", target_status = \"Surrender\") |>     exp_stats() #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1        1      1     35.3 0.0283  exp_res <- census_dat |>            expose(\"2019-12-31\", target_status = \"Surrender\") |>            group_by(pol_yr, inc_guar) |>            exp_stats(control_vars = \"product\")  exp_res #>  #> ── Experience study results ── #>  #> • Groups: pol_yr and inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Control variables: product #> • Expected values: control #>  #> # A tibble: 30 × 8 #>    pol_yr inc_guar n_claims claims exposure   q_obs control ae_control #>     <int> <lgl>       <int>  <int>    <dbl>   <dbl>   <dbl>      <dbl> #>  1      1 FALSE          56     56    7720. 0.00725  0.0217      0.335 #>  2      1 TRUE           46     46   11532. 0.00399  0.0217      0.184 #>  3      2 FALSE          92     92    7103. 0.0130   0.0216      0.598 #>  4      2 TRUE           68     68   10612. 0.00641  0.0216      0.296 #>  5      3 FALSE          67     67    6447. 0.0104   0.0216      0.480 #>  6      3 TRUE           57     57    9650. 0.00591  0.0216      0.273 #>  7      4 FALSE         123    123    5799. 0.0212   0.0216      0.980 #>  8      4 TRUE           45     45    8737. 0.00515  0.0216      0.238 #>  9      5 FALSE          97     97    5106. 0.0190   0.0216      0.878 #> 10      5 TRUE           67     67    7810. 0.00858  0.0216      0.396 #> # ℹ 20 more rows summary(exp_res) #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Control variables: product #> • Expected values: control #>  #> # A tibble: 1 × 6 #>   n_claims claims exposure  q_obs control ae_control #>      <int>  <int>    <dbl>  <dbl>   <dbl>      <dbl> #> 1     2869   2869  132634. 0.0216  0.0216          1 summary(exp_res, inc_guar) #>  #> ── Experience study results ── #>  #> • Groups: inc_guar #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #> • Control variables: product #> • Expected values: control #>  #> # A tibble: 2 × 7 #>   inc_guar n_claims claims exposure  q_obs control ae_control #>   <lgl>       <int>  <int>    <dbl>  <dbl>   <dbl>      <dbl> #> 1 FALSE        1601   1601   52123. 0.0307  0.0216      1.42  #> 2 TRUE         1268   1268   80511. 0.0157  0.0216      0.728"},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exposure records from census records — expose","title":"Create exposure records from census records — expose","text":"Convert data frame census-level records exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exposure records from census records — expose","text":"","code":"expose(   .data,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   cal_expo = FALSE,   expo_length = c(\"year\", \"quarter\", \"month\", \"week\"),   col_pol_num = \"pol_num\",   col_status = \"status\",   col_issue_date = \"issue_date\",   col_term_date = \"term_date\",   default_status )  expose_py(...)  expose_pq(...)  expose_pm(...)  expose_pw(...)  expose_cy(...)  expose_cq(...)  expose_cm(...)  expose_cw(...)"},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exposure records from census records — expose","text":".data data frame census-level records end_date Experience study end date start_date Experience study start date. Default value = 1900-01-01. target_status Character vector target status values. Default value = NULL. cal_expo Set TRUE calendar year exposures. Otherwise policy year exposures assumed. expo_length Exposure period length col_pol_num Name column .data containing policy number col_status Name column .data containing policy status col_issue_date Name column .data containing issue date col_term_date Name column .data containing termination date default_status Optional scalar character representing default active status code. provided, common status assumed. ... Arguments passed expose()","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exposure records from census records — expose","text":"tibble class exposed_df, tbl_df, tbl, data.frame. results include existing columns .data plus new columns exposures observation periods. Observation periods include counters policy exposures, start dates, end dates. start dates end dates inclusive bounds. policy year exposures, two observation period columns returned. Columns beginning (pol_) integer policy periods. Columns beginning (pol_date_) calendar dates representing anniversary dates, monthiversary dates, etc.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exposure records from census records — expose","text":"Census-level data refers data set wherein one row per unique policy. Exposure-level data expands census-level data one record per policy per observation period. Observation periods meaningful period time policy year, policy month, calendar year, calendar quarter, calendar month, etc. target_status used calculation exposures. annual exposure method applied, allocates full period exposure statuses target_status. statuses, new entrants exits partially exposed based time elapsed observation period. method consistent Balducci Hypothesis, assumes probability termination proportionate time elapsed observation period. annual exposure method desired, target_status can ignored. case, partial exposures always applied regardless status. default_status used indicate default active status used exposure records created.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"policy-period-and-calendar-period-variations","dir":"Reference","previous_headings":"","what":"Policy period and calendar period variations","title":"Create exposure records from census records — expose","text":"functions expose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw() convenience functions specific implementations expose(). two characters underscore describe exposure type exposure period, respectively. exposures types: p refers policy years c refers calendar years exposure periods: y = years q = quarters m = months w = weeks columns containing dates must YYYY-MM-DD format.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create exposure records from census records — expose","text":"Atkinson McGarry (2016). Experience Study Calculations. https://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/expose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exposure records from census records — expose","text":"","code":"toy_census |> expose(\"2020-12-31\") #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: #> • Study range: 1900-01-01 to 2020-12-31 #>  #> # A tibble: 33 × 8 #>    pol_num status issue_date term_date pol_yr pol_date_yr pol_date_yr_end #>      <int> <fct>  <date>     <date>     <int> <date>      <date>          #>  1       1 Active 2010-01-01 NA             1 2010-01-01  2010-12-31      #>  2       1 Active 2010-01-01 NA             2 2011-01-01  2011-12-31      #>  3       1 Active 2010-01-01 NA             3 2012-01-01  2012-12-31      #>  4       1 Active 2010-01-01 NA             4 2013-01-01  2013-12-31      #>  5       1 Active 2010-01-01 NA             5 2014-01-01  2014-12-31      #>  6       1 Active 2010-01-01 NA             6 2015-01-01  2015-12-31      #>  7       1 Active 2010-01-01 NA             7 2016-01-01  2016-12-31      #>  8       1 Active 2010-01-01 NA             8 2017-01-01  2017-12-31      #>  9       1 Active 2010-01-01 NA             9 2018-01-01  2018-12-31      #> 10       1 Active 2010-01-01 NA            10 2019-01-01  2019-12-31      #> # ℹ 23 more rows #> # ℹ 1 more variable: exposure <dbl>  census_dat |> expose_py(\"2019-12-31\", target_status = \"Surrender\") #>  #> ── Exposure data ── #>  #> • Exposure type: policy_year #> • Target status: Surrender #> • Study range: 1900-01-01 to 2019-12-31 #>  #> # A tibble: 141,252 × 15 #>    pol_num status issue_date inc_guar qual    age product gender wd_age premium #>      <int> <fct>  <date>     <lgl>    <lgl> <int> <fct>   <fct>   <int>   <dbl> #>  1       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  2       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  3       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  4       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  5       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  6       1 Active 2014-12-17 TRUE     FALSE    56 b       F          77     370 #>  7       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  8       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #>  9       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> 10       2 Active 2007-09-24 FALSE    FALSE    71 a       F          71     708 #> # ℹ 141,242 more rows #> # ℹ 5 more variables: term_date <date>, pol_yr <int>, pol_date_yr <date>, #> #   pol_date_yr_end <date>, exposure <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split calendar exposures by policy year — expose_split","title":"Split calendar exposures by policy year — expose_split","text":"Split calendar period exposures cross policy anniversary pre-anniversary record post-anniversary record. splitting data, resulting data frame contain calendar exposures policy year exposures. columns named exposure_cal exposure_pol, respectively. Calendar exposures original units passed expose_split(). Policy exposures always expressed years. splitting exposures, downstream functions like exp_stats() exp_shiny() require clarification exposure basis used summarize results. is_split_exposed_df() return TRUE x split_exposed_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split calendar exposures by policy year — expose_split","text":"","code":"expose_split(.data)  is_split_exposed_df(x)"},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split calendar exposures by policy year — expose_split","text":".data exposed_df object calendar period exposures. x object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split calendar exposures by policy year — expose_split","text":"expose_split(), tibble class split_exposed_df, exposed_df, tbl_df, tbl, data.frame. results include columns .data except exposure renamed exposure_cal. Additional columns include: exposure_pol - policy year exposures pol_yr - policy year is_split_exposed_df(), length-1 logical vector.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split calendar exposures by policy year — expose_split","text":".data must exposed_df calendar year, quarter, month, week exposure records. Calendar year exposures created functions expose_cy(), expose_cq(), expose_cm(), expose_cw(), (expose() cal_expo = TRUE).","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/expose_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split calendar exposures by policy year — expose_split","text":"","code":"toy_census |> expose_cy(\"2022-12-31\") |> expose_split() #>  #> ── Exposure data ── #>  #> • Exposure type: split_year #> • Target status: #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 58 × 9 #>    pol_num status issue_date term_date cal_yr     cal_yr_end pol_yr #>      <int> <fct>  <date>     <date>    <date>     <date>      <int> #>  1       1 Active 2010-01-01 NA        2010-01-01 2010-12-31      1 #>  2       1 Active 2010-01-01 NA        2011-01-01 2011-12-31      2 #>  3       1 Active 2010-01-01 NA        2012-01-01 2012-12-31      3 #>  4       1 Active 2010-01-01 NA        2013-01-01 2013-12-31      4 #>  5       1 Active 2010-01-01 NA        2014-01-01 2014-12-31      5 #>  6       1 Active 2010-01-01 NA        2015-01-01 2015-12-31      6 #>  7       1 Active 2010-01-01 NA        2016-01-01 2016-12-31      7 #>  8       1 Active 2010-01-01 NA        2017-01-01 2017-12-31      8 #>  9       1 Active 2010-01-01 NA        2018-01-01 2018-12-31      9 #> 10       1 Active 2010-01-01 NA        2019-01-01 2019-12-31     10 #> # ℹ 48 more rows #> # ℹ 2 more variables: exposure_cal <dbl>, exposure_pol <dbl>"},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposed data frame helper functions — is_exposed_df","title":"Exposed data frame helper functions — is_exposed_df","text":"Test coerce exposed_df class.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposed data frame helper functions — is_exposed_df","text":"","code":"is_exposed_df(x)  as_exposed_df(   x,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   cal_expo = FALSE,   expo_length = c(\"year\", \"quarter\", \"month\", \"week\"),   trx_types = NULL,   col_pol_num,   col_status,   col_exposure,   col_pol_per,   cols_dates,   col_trx_n_ = \"trx_n_\",   col_trx_amt_ = \"trx_amt_\",   default_status )"},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exposed data frame helper functions — is_exposed_df","text":"x object. as_exposed_df(), x must data frame. end_date Experience study end date start_date Experience study start date. Default value = 1900-01-01. target_status Character vector target status values. Default value = NULL. cal_expo Set TRUE calendar year exposures. Otherwise policy year exposures assumed. expo_length Exposure period length trx_types Optional. Character vector containing unique transaction types attached x. value trx_types, as_exposed_df requires columns exist x named trx_n_{*} trx_amt_{*} containing transaction counts amounts, respectively. prefixes \"trx_n_\" \"trx_amt_\" can overridden using col_trx_n_ col_trx_amt_ arguments. col_pol_num Optional. Name column x containing policy number. assumed default \"pol_num\". col_status Optional. Name column x containing policy status. assumed default \"status\". col_exposure Optional. Name column x containing exposures. assumed default \"exposure\". col_pol_per Optional. Name column x containing policy exposure periods. necessary cal_expo FALSE. assumed default either \"pol_yr\", \"pol_qtr\", \"pol_mth\", \"pol_wk\" depending value expo_length. cols_dates Optional. Names columns x containing exposure start end dates. date ranges assumed exclusive. assumed default form A_B. \"cal\" cal_expo TRUE \"pol\" otherwise. B either \"yr\", \"qtr\", \"mth\", \"wk\" depending value expo_length. col_trx_n_ Optional. Prefix use columns containing transaction counts. col_trx_amt_ Optional. Prefix use columns containing transaction amounts. default_status Optional scalar character representing default active status code. provided, common status assumed.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exposed data frame helper functions — is_exposed_df","text":"is_exposed_df(), length-1 logical vector. as_exposed_df(), exposed_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/is_exposed_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exposed data frame helper functions — is_exposed_df","text":"is_exposed_df() return TRUE x exposed_df object. as_exposed_df() coerce data frame exposed_df object data frame columns policy numbers, statuses, exposures, policy periods (policy exposures ), exposure start / end dates. Optionally, x transaction counts amounts type, can specified without calling add_transactions().","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional plotting functions for termination studies — plot_special","title":"Additional plotting functions for termination studies — plot_special","text":"functions create additional experience study plots available difficult produce using autoplot.exp_df() function.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional plotting functions for termination studies — plot_special","text":"","code":"plot_termination_rates(object, ..., include_cred_adj = FALSE)  plot_actual_to_expected(object, ..., add_hline = TRUE)"},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional plotting functions for termination studies — plot_special","text":"object object class exp_df created function exp_stats(). ... Additional arguments passed autoplot.exp_df(). include_cred_adj TRUE, credibility-weighted termination rates plotted well. add_hline TRUE, blue dashed horizontal line drawn 100%.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional plotting functions for termination studies — plot_special","text":"ggplot object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional plotting functions for termination studies — plot_special","text":"plot_termination_rates() - Create plot observed termination rates expected termination rates attached exp_df object. plot_actual_to_expected() - Create plot actual--expected termination rates attached exp_df object.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional plotting functions for termination studies — plot_special","text":"","code":"study_py <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\") expected_table <- c(seq(0.005, 0.03, length.out = 10), 0.2, 0.15, rep(0.05, 3))  study_py <- study_py |>   mutate(expected_1 = expected_table[pol_yr],          expected_2 = ifelse(inc_guar, 0.015, 0.03))  exp_res <- study_py |> group_by(pol_yr) |>   exp_stats(expected = c(\"expected_1\", \"expected_2\"))  plot_termination_rates(exp_res)   plot_actual_to_expected(exp_res)"},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional plotting functions for transaction studies — plot_special_trx","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"functions create additional experience study plots available difficult produce using autoplot.trx_df() function.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"","code":"plot_utilization_rates(object, ...)"},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"object object class trx_df created function trx_stats(). ... Additional arguments passed autoplot.trx_df().","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"ggplot object","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"plot_utilization_rates() - Create plot transaction frequency severity. Frequency represented utilization rates (trx_util). Severity represented transaction amounts percentage one columns data ({*}_w_trx). severity series begin prefix \"pct_of_\" end suffix \"_w_trx\". suffix refers fact denominator includes records non-zero transactions. Severity series based column names passed percent_of argument trx_stats(). \"percentage \" columns exist object, function plot utilization rates.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/plot_special_trx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional plotting functions for transaction studies — plot_special_trx","text":"","code":"study_py <- expose_py(census_dat, \"2019-12-31\",                       target_status = \"Surrender\") |>   add_transactions(withdrawals) |>   left_join(account_vals, by = c(\"pol_num\", \"pol_date_yr\"))  trx_res <- study_py |> group_by(pol_yr) |>   trx_stats(percent_of = \"av_anniv\", combine_trx = TRUE)  plot_utilization_rates(trx_res)"},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate policy duration — pol_yr","title":"Calculate policy duration — pol_yr","text":"Given vector dates vector issue dates, calculate policy years, quarters, months, weeks.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate policy duration — pol_yr","text":"","code":"pol_yr(x, issue_date)  pol_qtr(x, issue_date)  pol_mth(x, issue_date)  pol_wk(x, issue_date)"},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate policy duration — pol_yr","text":"x vector dates issue_date vector issue dates","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate policy duration — pol_yr","text":"integer vector","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate policy duration — pol_yr","text":"functions assume first day policy year anniversary date (issue date first year). last day policy year day next anniversary date. Analogous rules used policy quarters, policy months, policy weeks.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/pol_yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate policy duration — pol_yr","text":"","code":"pol_yr(as.Date(\"2021-02-28\") + 0:2, \"2020-02-29\") #> [1] 1 2 2  pol_mth(as.Date(\"2021-02-28\") + 0:2, \"2020-02-29\") #> [1] 12 13 13"},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":null,"dir":"Reference","previous_headings":"","what":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"Mortality rates mortality improvement rates 2012 Individual Annuity Mortality Basic (IAMB) Table Projection Scale G2.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"","code":"qx_iamb  scale_g2"},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"2012 IAMB table, data frame 242 rows 3 columns: age Attained age qx Mortality rate gender Female Male Projection Scale G2 table, data frame 242 rows 3 columns: age Attained age mi Mortality improvement rate gender Female Male","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/qx_iamb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2012 Individual Annuity Mortality Table and Projection Scale G2 — qx_iamb","text":"https://mort.soa.org/ https://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr anti_join, arrange, filter, full_join, group_by, groups, inner_join, left_join, mutate, relocate, rename, right_join, select, semi_join, slice, ungroup generics tidy ggplot2 autoplot recipes bake, prep","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated annuity data — sim_data","title":"Simulated annuity data — sim_data","text":"Simulated data theoretical deferred annuity product optional guaranteed income rider. data theoretical represent experience specific product.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated annuity data — sim_data","text":"","code":"census_dat  withdrawals  account_vals"},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated annuity data — sim_data","text":"Three data frames containing census records (census_dat), withdrawal transactions (withdrawals), historical account values (account_vals). object class tbl_df (inherits tbl, data.frame) 20000 rows 11 columns. object class tbl_df (inherits tbl, data.frame) 160130 rows 4 columns. object class tbl_df (inherits tbl, data.frame) 141252 rows 3 columns.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":"census-data-census-dat-","dir":"Reference","previous_headings":"","what":"Census data (census_dat)","title":"Simulated annuity data — sim_data","text":"pol_num Policy number status Policy status: Active, Surrender, Death issue_date Issue date inc_guar Indicates whether policy issued income guarantee qual Indicates whether policy purchased tax-qualified funds age Issue age product Product: , b, c gender M (Male) F (Female) wd_age Age withdrawals commence premium Single premium deposit term_date Termination date upon death surrender","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":"withdrawal-data-withdrawals-","dir":"Reference","previous_headings":"","what":"Withdrawal data (withdrawals)","title":"Simulated annuity data — sim_data","text":"pol_num Policy number trx_date Withdrawal transaction date trx_type Withdrawal transaction type, either Base Rider trx_amt Withdrawal transaction amount","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/sim_data.html","id":"account-values-data-account-vals-","dir":"Reference","previous_headings":"","what":"Account values data (account_vals)","title":"Simulated annuity data — sim_data","text":"pol_num Policy number pol_date_yr Policy anniversary date (beginning year) av_anniv Account value policy anniversary date","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exposure records in a recipes step — step_expose","title":"Create exposure records in a recipes step — step_expose","text":"step_expose() creates specification recipe step convert data frame census-level records exposure-level records.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exposure records in a recipes step — step_expose","text":"","code":"step_expose(   recipe,   ...,   role = NA,   trained = FALSE,   end_date,   start_date = as.Date(\"1900-01-01\"),   target_status = NULL,   options = list(cal_expo = FALSE, expo_length = \"year\"),   drop_pol_num = TRUE,   skip = TRUE,   id = recipes::rand_id(\"expose\") )"},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exposure records in a recipes step — step_expose","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. end_date Experience study end date start_date Experience study start date. Default value = 1900-01-01. target_status Character vector target status values. Default value = NULL. options named list additional arguments passed expose(). drop_pol_num Whether pol_num column produced expose() dropped. Defaults TRUE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exposure records in a recipes step — step_expose","text":"updated version recipe new expose step added sequence existing operations. tidy method, tibble columns exposure_type, target_status, start_date, end_date.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exposure records in a recipes step — step_expose","text":"Policy year exposures calculated default. switch calendar exposures another exposure length, use pass appropriate arguments options parameter. Policy numbers dropped default whenever recipe baked. done prevent unintentional errors model formula includes variables (y ~ .). policy numbers required reason (mixed effect models, identification, etc.), set drop_pol_num FALSE.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/step_expose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exposure records in a recipes step — step_expose","text":"","code":"expo_rec <- recipes::recipe(status ~ ., toy_census) |>   step_expose(end_date = \"2022-12-31\", target_status = \"Surrender\",               options = list(expo_length = \"month\")) |>   prep()  recipes::juice(expo_rec) #> # A tibble: 416 × 7 #>    issue_date term_date status pol_mth pol_date_mth pol_date_mth_end exposure #>    <date>     <date>    <fct>    <int> <date>       <date>              <dbl> #>  1 2010-01-01 NA        Active       1 2010-01-01   2010-01-31              1 #>  2 2010-01-01 NA        Active       2 2010-02-01   2010-02-28              1 #>  3 2010-01-01 NA        Active       3 2010-03-01   2010-03-31              1 #>  4 2010-01-01 NA        Active       4 2010-04-01   2010-04-30              1 #>  5 2010-01-01 NA        Active       5 2010-05-01   2010-05-31              1 #>  6 2010-01-01 NA        Active       6 2010-06-01   2010-06-30              1 #>  7 2010-01-01 NA        Active       7 2010-07-01   2010-07-31              1 #>  8 2010-01-01 NA        Active       8 2010-08-01   2010-08-31              1 #>  9 2010-01-01 NA        Active       9 2010-09-01   2010-09-30              1 #> 10 2010-01-01 NA        Active      10 2010-10-01   2010-10-31              1 #> # ℹ 406 more rows"},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize experience study records — summary.exposed_df","title":"Summarize experience study records — summary.exposed_df","text":"Create summary data frame termination experience given target status.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize experience study records — summary.exposed_df","text":"","code":"# S3 method for class 'exposed_df' summary(object, ...)"},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize experience study records — summary.exposed_df","text":"object data frame exposure-level records ... Additional arguments passed exp_stats()","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize experience study records — summary.exposed_df","text":"tibble class exp_df, tbl_df, tbl, data.frame.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize experience study records — summary.exposed_df","text":"Calling summary() exposed_df object summarize results using exp_stats(). See exp_stats() information.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/actxps/reference/summary.exposed_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize experience study records — summary.exposed_df","text":"","code":"toy_census |> expose(\"2022-12-31\", target_status = \"Surrender\") |>     summary() #>  #> ── Experience study results ── #>  #> • Target status: Surrender #> • Study range: 1900-01-01 to 2022-12-31 #>  #> # A tibble: 1 × 4 #>   n_claims claims exposure  q_obs #>      <int>  <int>    <dbl>  <dbl> #> 1        1      1     35.3 0.0283"},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy policy census data — toy_census","title":"Toy policy census data — toy_census","text":"tiny dataset containing 3 policies: one active, one terminated due death, one terminated due surrender.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy policy census data — toy_census","text":"","code":"toy_census"},{"path":"https://mattheaphy.github.io/actxps/reference/toy_census.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy policy census data — toy_census","text":"data frame 3 rows 4 columns: pol_num Policy number status Policy status issue_date Issue date term_date Termination date","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize transactions and utilization rates — trx_stats","title":"Summarize transactions and utilization rates — trx_stats","text":"Create summary data frame transaction counts, amounts, utilization rates.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize transactions and utilization rates — trx_stats","text":"","code":"trx_stats(   .data,   trx_types,   percent_of = NULL,   combine_trx = FALSE,   col_exposure = \"exposure\",   full_exposures_only = TRUE,   conf_int = FALSE,   conf_level = 0.95 )  # S3 method for class 'trx_df' summary(object, ...)"},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize transactions and utilization rates — trx_stats","text":".data data frame exposure-level records type exposed_df transaction data attached. necessary, use as_exposed_df() convert data frame exposed_df object, use add_transactions() attach transactions exposed_df object. trx_types character vector transaction types include output. none provided, available transaction types .data used. percent_of optional character vector containing column names .data use denominators calculation utilization rates actual--expected ratios. combine_trx FALSE (default), results contain output rows transaction type. TRUE, results contains aggregated experience across transaction types. col_exposure Name column .data containing exposures full_exposures_only TRUE (default), partially exposed records excluded data. conf_int TRUE, output include confidence intervals around observed utilization rate percent_of output columns. conf_level Confidence level confidence intervals object trx_df object ... Groups retain summary() called","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize transactions and utilization rates — trx_stats","text":"tibble class trx_df, tbl_df, tbl, data.frame. results include columns grouping variables transaction types, plus following: trx_n: number unique transactions. trx_amt: total transaction amount trx_flag: number observation periods non-zero transaction amounts. exposure: total exposures avg_trx: mean transaction amount (trx_amt / trx_flag) avg_all: mean transaction amount records (trx_amt / exposure) trx_freq: transaction frequency transaction occurs (trx_n / trx_flag) trx_util: transaction utilization per observation period (trx_flag / exposure) percent_of provided, results also include: sum columns passed percent_of non-zero transactions. columns include suffix _w_trx. sum columns passed percent_of pct_of_{*}_w_trx: total transactions percentage column {*}_w_trx. words, total transactions divided sum column including records utilizing transactions. pct_of_{*}_all: total transactions percentage column {*}. words, total transactions divided sum column regardless whether transactions utilized. conf_int set TRUE, additional columns added lower upper confidence interval limits around observed utilization rate percent_of output columns. Confidence interval columns include name original output column suffixed either _lower _upper. values passed percent_of, additional column created containing sum squared transaction amounts (trx_amt_sq).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize transactions and utilization rates — trx_stats","text":"Unlike exp_stats(), function requires data exposed_df object. .data grouped, resulting data frame contain one row per transaction type per group. number transaction types can passed trx_types argument, however transaction type must appear trx_types attribute .data. addition, trx_stats() expects see columns named trx_n_{*} (transaction counts) trx_amt_{*} (transaction amounts) transaction type. ensure .data appropriate format, use functions as_exposed_df() convert existing data frame transactions add_transactions() attach transactions existing exposed_df object.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"-percentage-of-calculations","dir":"Reference","previous_headings":"","what":"\"Percentage of\" calculations","title":"Summarize transactions and utilization rates — trx_stats","text":"percent_of argument optional. provided, argument must character vector values corresponding columns .data containing values use denominators calculation utilization rates actual--expected ratios. Example usage: study partial withdrawal transactions, percent_of refers account values, observed withdrawal rates can determined. study recurring claims, percent_of refers column containing maximum benefit amount, utilization rates can determined.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence intervals","title":"Summarize transactions and utilization rates — trx_stats","text":"conf_int set TRUE, output contain lower upper confidence interval limits observed utilization rate percent_of output columns. confidence level dictated conf_level. Intervals utilization rate (trx_util) assume binomial distribution. Intervals transactions percentage another column non-zero transactions (pct_of_{*}_w_trx) constructed using normal distribution Intervals transactions percentage another column regardless transaction utilization (pct_of_{*}_all) calculated assuming aggregate distribution normal mean equal observed transactions variance equal : Var(S) = E(N) * Var(X) + E(X)^2 * Var(N), S aggregate transactions random variable, X individual transaction amount assumed follow normal distribution, N binomial random variable transaction utilization.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"default-removal-of-partial-exposures","dir":"Reference","previous_headings":"","what":"Default removal of partial exposures","title":"Summarize transactions and utilization rates — trx_stats","text":"default, partial exposures removed .data summarizing results. done avoid complexity associated lopsided skew timing transactions. example, transactions can occur monthly basis annually beginning policy year, partial exposures may appropriate. policy exposure 0.5 years taking withdrawals annually beginning year, argument made exposure instead 1 complete year. policy expected take withdrawals 9 months year, clear exposure 0.5 years 0.5 / 0.75 years. override treatment, set full_exposures_only FALSE.","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"summary-method","dir":"Reference","previous_headings":"","what":"summary() Method","title":"Summarize transactions and utilization rates — trx_stats","text":"Applying summary() trx_df object re-summarize data retaining grouping variables passed \"dots\" (...).","code":""},{"path":"https://mattheaphy.github.io/actxps/reference/trx_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize transactions and utilization rates — trx_stats","text":"","code":"expo <- expose_py(census_dat, \"2019-12-31\", target_status = \"Surrender\") |>   add_transactions(withdrawals)  res <- expo |> group_by(inc_guar) |> trx_stats(percent_of = \"premium\") res #>  #> ── Transaction study results ── #>  #> • Groups: inc_guar #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: premium #>  #> # A tibble: 4 × 14 #>   inc_guar trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>   <lgl>    <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl> #> 1 FALSE    Base     52939    24703  952629    48938    38.6   19.5      2.14 #> 2 FALSE    Rider        0        0       0    48938   NaN      0      NaN    #> 3 TRUE     Base      7561     3521  141270    75235    40.1    1.88     2.15 #> 4 TRUE     Rider    77321    35941 2842729    75235    79.1   37.8      2.15 #> # ℹ 5 more variables: trx_util <dbl>, premium_w_trx <dbl>, premium <dbl>, #> #   pct_of_premium_w_trx <dbl>, pct_of_premium_all <dbl>  summary(res) #>  #> ── Transaction study results ── #>  #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: premium #>  #> # A tibble: 2 × 13 #>   trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq trx_util #>   <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #> 1 Base     60500    28224 1093899   124173    38.8    8.81     2.14    0.227 #> 2 Rider    77321    35941 2842729   124173    79.1   22.9      2.15    0.289 #> # ℹ 4 more variables: premium_w_trx <dbl>, premium <dbl>, #> #   pct_of_premium_w_trx <dbl>, pct_of_premium_all <dbl>  expo |> group_by(inc_guar) |>   trx_stats(percent_of = \"premium\", combine_trx = TRUE, conf_int = TRUE) #>  #> ── Transaction study results ── #>  #> • Groups: inc_guar #> • Study range: 1900-01-01 to 2019-12-31 #> • Transaction types: Base and Rider #> • Transactions as % of: premium #>  #> # A tibble: 2 × 21 #>   inc_guar trx_type trx_n trx_flag trx_amt exposure avg_trx avg_all trx_freq #>   <lgl>    <chr>    <dbl>    <int>   <dbl>    <dbl>   <dbl>   <dbl>    <dbl> #> 1 FALSE    All      52939    24703  952629    48938    38.6    19.5     2.14 #> 2 TRUE     All      84882    39462 2983999    75235    75.6    39.7     2.15 #> # ℹ 12 more variables: trx_util <dbl>, premium_w_trx <dbl>, premium <dbl>, #> #   pct_of_premium_w_trx <dbl>, pct_of_premium_all <dbl>, trx_util_lower <dbl>, #> #   trx_util_upper <dbl>, pct_of_premium_w_trx_lower <dbl>, #> #   pct_of_premium_w_trx_upper <dbl>, pct_of_premium_all_lower <dbl>, #> #   pct_of_premium_all_upper <dbl>, trx_amt_sq <dbl>"},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-160","dir":"Changelog","previous_headings":"","what":"actxps 1.6.0","title":"actxps 1.6.0","text":"New feature - control variables exp_stats() two new arguments: control_vars control_distinct_max. Control variables used estimate impact grouping variables observed experience accounting impact control variables. idea experience first summarized across control variables derive new expected values basis. expected values basis used calculate actual--expected ratios. control_distinct_max argument places upper limit maximum number unique values allowed control variable. exp_shiny() now includes control variable selection widget. New feature - autotable() methods termination transaction studies now include show_total argument appends grand total rows. Added “cli” package replace “rlang” certain errors, warnings, messages. Various small typo fixes.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-150","dir":"Changelog","previous_headings":"","what":"actxps 1.5.0","title":"actxps 1.5.0","text":"CRAN release: 2024-06-25 expose_split() bug fixes: expose_split() updated respect values start_date end_date originally passed expose() function. Future policy anniversary dates falling February 29th leap days now consistent expose() New tests added verify sum policy year exposures (exposure_pol) calling expose_split() match exposures produced expose_py(). expose() family functions add_transactions() now allow date columns passed character vectors YYYY-MM-DD format. character vectors converted dates behind--scenes, missing values results error message. improve speed date calculations, lubridate replaced clock package. Lubridate longer included Imports. Breaking change - pol_interval() function longer exported. part removal lubridate, function’s dur_length argument accepts, “year”, “quarter”, “month”, “week”. Shiny app layout updates Small vignette documentation clean-ups","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-140","dir":"Changelog","previous_headings":"","what":"actxps 1.4.0","title":"actxps 1.4.0","text":"CRAN release: 2023-11-26 actxps now supports split exposures divide calendar periods crossing policy anniversaries pre-anniversary post-anniversary records. function expose_split() can convert exposed_df object calendar period exposures (yearly, quarterly, monthly, weekly) split_exposed_df object. Split exposure data frames contain columns exposures calendar period policy year basis. exp_stats() exp_shiny() now require clarification exposure basis used passed split_exposed_df object. expose_df objects now contains default_status attribute. autotable() functions now contain arguments decimals_amt suffix_amt. former allows one specify number decimals appearing amount columns. latter used automatically scale large numbers thousands, millions, billions, trillions. Corrected error calculation standard deviations claims exp_stats() passed weighting variable. Added summary() method exposed_df objects calls exp_stats(). assumed default status expose() functions changed first observed status common status. functions as_exp_df() as_trx_df() added convert pre-aggregated experience studies exp_df trx_df formats, respectively. agg_sim_dat - new simulated data set pre-aggregated experience added testing as_exp_df() as_trx_df(). is_exp_df() as_trx_df() added test exp_df trx_df classes.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-130","dir":"Changelog","previous_headings":"","what":"actxps 1.3.0","title":"actxps 1.3.0","text":"CRAN release: 2023-09-15 new conf_int argument added exp_stats() creates confidence intervals around observed termination rates, credibility-weighted termination rates, actual--expected ratios. Similarly, conf_int added trx_stats() create confidence intervals around utilization rates “percentage ” output columns. conf_level argument also added function. autoplot.exp_df() autoplot.trx_df() now conf_int_bars argument plots confidence intervals (available) error bars selected y-variable autoplot.exp_df() autoplot.trx_df() can now create scatter plots “points” passed geoms argument. second y-axis autoplot() methods updated use area geometry instead bars discrete x-axis variables. addition, log-10 y-scale used, areas always positive quantities. Previously, observed areas drawn negative values y-values main scale less 1. autotable.exp_df() autotable.trx_df() updated format intervals. exp_shiny() updates layout theme updated align changes made shiny 1.7.5 bslib 0.5.1 function now includes ability customize Bootstrap theme Plots can now re-sized viewed full screen mode Tables contain new customization options can viewed full screen mode Tables plots can exported plots tables optionally include confidence intervals Tooltips added throughout explain UI play / pause button added suspend interactivity demand description filters added sidebar Breaking change - confidence level argument cred_p renamed conf_level. change made confidence level longer strictly used credibility calculations. change impacts functions exp_stats() exp_shiny().","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-120","dir":"Changelog","previous_headings":"","what":"actxps 1.2.0","title":"actxps 1.2.0","text":"CRAN release: 2023-08-09 autoplot.exp_df() autoplot.trx_df() now include new options adding second y-axis plotting results log-10 scale. second y-axis defaults plotting exposures using area geometry. New plotting functions added create common experience analysis plots simple create using autoplot() methods. include plot_termination_rates() plot_actual_to_expected() termination studies plot_utilization_rates() transaction studies exp_shiny() function received handful updates accommodate new plotting functions options. small performance improvement added filtering logic well. New options include title input, credibility options taken exp_stats(), new vignette added data visualization. miscellaneous vignette updated include examples add_predictions() step_expose(). Examples added autoplot() autotable() methods Help documentation added package (?actxps)","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-110","dir":"Changelog","previous_headings":"","what":"actxps 1.1.0","title":"actxps 1.1.0","text":"CRAN release: 2023-05-07 New add_predictions() function attaches one columns model predictions exposed_df object data frame. Small updates add_transactions() autotable() functions compatibility dplyr 1.1.1 gt 0.9.0.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-101","dir":"Changelog","previous_headings":"","what":"actxps 1.0.1","title":"actxps 1.0.1","text":"CRAN release: 2023-04-11 Minor patch single test compatibility future release recipes package. Various small documentation typo fixes","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-100","dir":"Changelog","previous_headings":"","what":"actxps 1.0.0","title":"actxps 1.0.0","text":"CRAN release: 2023-03-04 actxps package now contains support transaction studies. add_transactions() function adds transactions exposed_df objects. trx_stats() function summarizes transaction results returns trx_df object. New transaction summary (trx_df) S3 methods added autoplot() autotable(). exp_shiny() function updated support transaction studies. New sample data sets added transactions (withdrawals) sample policy values (account_vals). meant paired census_dat. Added vignette(\"transactions\"). changes new family functions added calculate policy durations. include pol_interval() (generic version), pol_yr(), pol_qtr(), pol_mth(), pol_wk(). See vignette(\"misc\"). Several updates made as_exposed_df() function include stricter input requirements helpful error messages. S3 methods several dplyr functions added exposed_df objects ensure class persistence, especially grouped data frames. include: group_by() ungroup(), filter(), arrange(), mutate(), select(), slice(), rename(), relocate(), left_join(), right_join(), inner_join(), full_join(), semi_join(), anti_join(). conditional formatting color autotable.exp_df() updated consistent across like columns. pol_val column census_dat renamed premium.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-021","dir":"Changelog","previous_headings":"","what":"actxps 0.2.1","title":"actxps 0.2.1","text":"CRAN release: 2023-02-11 expose() functions now include new column period end dates. Fixed issues expose() dropping records: Handling leap days / years Correction date addition always rollback dates last day month. Fixed 2 R CMD check problems.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-020","dir":"Changelog","previous_headings":"","what":"actxps 0.2.0","title":"actxps 0.2.0","text":"CRAN release: 2022-08-31 First version submitted CRAN. Added exp_shiny() function.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-010","dir":"Changelog","previous_headings":"","what":"actxps 0.1.0","title":"actxps 0.1.0","text":"Added step_expose() recipe step function.","code":""},{"path":"https://mattheaphy.github.io/actxps/news/index.html","id":"actxps-009000","dir":"Changelog","previous_headings":"","what":"actxps 0.0.9000","title":"actxps 0.0.9000","text":"First developmental version","code":""}]
